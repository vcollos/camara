import pandas as pd
import streamlit as st
import io
import base64
from datetime import datetime, timedelta
import os
import numpy as np
import re
import matplotlib.pyplot as plt
import seaborn as sns
import zipfile
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch
from reportlab.lib.units import cm

# Configurar o t√≠tulo e o √≠cone da p√°gina
st.set_page_config(
    page_title="Processador de CSV Uniodonto",
    page_icon="üìä",
    layout="wide"
)

# Dicion√°rio com descri√ß√µes das contas cont√°beis
NOMES_CONTAS_CONTABEIS = {
    85433: "Contrapresta√ß√£o assumida em P√≥s-pagamento",
    40507: "Despesas com Eventos/ Sinistros",
    90919: "Interc√¢mbio a Pagar de Corresponsabilidade Cedida - Pre√ßo P√≥s-estabelecido",
    15456: "IRRF - sobre Faturamento",
    40140: "Ato Odontol√≥gico",
    51202: "Despesas Diversas",
    52631: "Taxa para Manuten√ß√£o da Central",
    52532: "Propaganda e Marketing - Matriz",
    19958: "Contrapresta√ß√£o Corresponsabilidade Assumida Pr√©-pagamento",
    52632: "Taxa para Manuten√ß√£o da Federa√ß√£o",
    19253: "Cr√©dito com Singulares",
    40413: "(-) Recup.Reemb. Contratante Assumida P√≥s-pagamento",
    23476: "IRPJ - NF Servi√ßos (cod. 3280)",
    21898: "Contrap. Corresp. Assumida P√≥s",
    92003: "Rede Contratada/Credenciada PJ - cl√≠nicas",
    30203: "Corresponsabilidade Assumida Pr√©",
    22036: "Federa√ß√£o Paulista",
    1021: "VL. N/NFF. INTERC. RECEB.ODONT",
    2005: "VL. S/NFF. INTERC. A PAGAR",
    2341: "VL. IRRF S/NF INTERC. PAGAR",
    22: "VL. IRRF N/NFF. SERVI√áOS",
    361: "VL. TAXA MANUT. DA CENTRAL S/N",
    365: "VL. FUNDO DE MARKTING S/NFF",
    30: "VL. CONTRATO SERVI√áOS DIVERSOS",
    33: "VL. CONTRAP. A RECEBER ODONT",
    228: "VL. CONTRAP. A RECEBER CLINICA",
    31426: "VL. CONTRATO OUTROS SERVI√áOS",
    30069: "VL. CONTRAP. RECEBIDA",
    30071: "VL. CONTRAP. RECEBIDA - CONSULTORIA",
    30127: "VL. CONTRAP. SERVI√áOS ADMINISTRATIVOS",
    368: "VL. TAXA MANUT. DA FEDERA√á√ÉO",
    179: "VL. MULTAS/JUROS"
}

class NeodontoCsvProcessor:
    def __init__(self):
        self.today = datetime.today()
        self.first_day_of_current_month = self.today.replace(day=1)
        self.last_day_of_previous_month = self.first_day_of_current_month - timedelta(days=1)
        self.processed_files = []
        self.error_files = []
        
        # Mapeamento oficial CodigoTipoRecebimento <-> DescricaoTipoRecebimento
        self.codigo_descricao_map = {
            1: "Repasse em Pr√©-pagamento",
            2: "Repasse em Custo Operacional", 
            3: "Taxa de Manuten√ß√£o",
            4: "Fundo de Marketing",
            5: "Juros",
            6: "Outros"
        }
        
        # Mapeamento reverso para sincroniza√ß√£o
        self.descricao_codigo_map = {v: k for k, v in self.codigo_descricao_map.items()}
    
    def sync_codigo_descricao(self, df):
        """
        Sincroniza CodigoTipoRecebimento e DescricaoTipoRecebimento para garantir consist√™ncia.
        Prioriza o CodigoTipoRecebimento como fonte da verdade.
        """
        inconsistencias = []
        
        for idx, row in df.iterrows():
            codigo = row.get('CodigoTipoRecebimento')
            descricao = row.get('DescricaoTipoRecebimento', '').strip()
            
            # Verificar se o c√≥digo √© v√°lido
            if codigo in self.codigo_descricao_map:
                descricao_esperada = self.codigo_descricao_map[codigo]
                
                # Se a descri√ß√£o n√£o bate com o c√≥digo, corrigir
                if descricao != descricao_esperada:
                    inconsistencias.append({
                        'index': idx,
                        'NomeSingular': row.get('NomeSingular', 'N/A'),
                        'codigo': codigo,
                        'descricao_atual': descricao,
                        'descricao_correta': descricao_esperada
                    })
                    
                    # Corrigir a descri√ß√£o baseada no c√≥digo
                    df.at[idx, 'DescricaoTipoRecebimento'] = descricao_esperada
            else:
                # C√≥digo inv√°lido - tentar corrigir baseado na descri√ß√£o
                if descricao in self.descricao_codigo_map:
                    codigo_correto = self.descricao_codigo_map[descricao]
                    inconsistencias.append({
                        'index': idx,
                        'NomeSingular': row.get('NomeSingular', 'N/A'),
                        'codigo': codigo,
                        'codigo_correto': codigo_correto,
                        'descricao_atual': descricao
                    })
                    
                    # Corrigir o c√≥digo baseado na descri√ß√£o
                    df.at[idx, 'CodigoTipoRecebimento'] = codigo_correto
                else:
                    # Nem c√≥digo nem descri√ß√£o s√£o v√°lidos - usar padr√£o
                    inconsistencias.append({
                        'index': idx,
                        'NomeSingular': row.get('NomeSingular', 'N/A'),
                        'codigo': codigo,
                        'descricao_atual': descricao,
                        'acao': 'Definido como "Outros" (c√≥digo 6)'
                    })
                    
                    df.at[idx, 'CodigoTipoRecebimento'] = 6
                    df.at[idx, 'DescricaoTipoRecebimento'] = "Outros"
        
        # Reportar inconsist√™ncias corrigidas
        if inconsistencias:
            st.warning(f"üîÑ **SINCRONIZA√á√ÉO**: {len(inconsistencias)} inconsist√™ncias entre C√≥digo e Descri√ß√£o foram corrigidas automaticamente")
            
            with st.expander("Ver detalhes das corre√ß√µes"):
                for inc in inconsistencias:
                    if 'descricao_correta' in inc:
                        st.write(f"‚Ä¢ **{inc['NomeSingular']}**: C√≥digo {inc['codigo']} ‚Üí Descri√ß√£o corrigida para '{inc['descricao_correta']}'")
                    elif 'codigo_correto' in inc:
                        st.write(f"‚Ä¢ **{inc['NomeSingular']}**: Descri√ß√£o '{inc['descricao_atual']}' ‚Üí C√≥digo corrigido para {inc['codigo_correto']}")
                    else:
                        st.write(f"‚Ä¢ **{inc['NomeSingular']}**: {inc['acao']}")
        
        return df
    
    def calculate_debit(self, row):
        """Calcula o valor de d√©bito baseado nas condi√ß√µes espec√≠ficas."""
        tipo = row['Tipo']
        tipo_singular = row['TipoSingular']
        codigo_tipo_recebimento = row['CodigoTipoRecebimento']
        nome_singular = str(row['NomeSingular']).upper() if pd.notnull(row['NomeSingular']) else ""
        descricao = str(row['Descricao']).upper() if pd.notnull(row['Descricao']) else ""
        
        # Novas regras para conven√ß√£o
        if "CONVENCAO" in descricao or "CONVEN√á√ÉO" in descricao:
            if tipo == 'A pagar':
                return 53742
            elif tipo == 'A receber':
                return 84679

        # Regras especiais para CodigoTipoRecebimento 5
        if codigo_tipo_recebimento == 5:
            if tipo == 'A receber':
                if "LGPD" in descricao or "ATUARIO" in descricao or "ATU√ÅRIO" in descricao:
                    return 84679
            else:  # A pagar
                if "LGPD" in descricao:
                    return 52129
                elif "ATUARIO" in descricao or "ATU√ÅRIO" in descricao:
                    return 52451

        # A pagar
        if tipo == 'A pagar':
            if tipo_singular == 'Operadora':
                if codigo_tipo_recebimento == 1:
                    return 31731
                elif codigo_tipo_recebimento == 2:
                    return 40507
                elif codigo_tipo_recebimento == 3:
                    if nome_singular == "UNIODONTO DO BRASIL":
                        return 52631
                    else:
                        return 52632
                elif codigo_tipo_recebimento == 4:
                    return 52532
                elif codigo_tipo_recebimento == 5:
                    return 51818
                elif codigo_tipo_recebimento == 6:
                    return 51202
            elif tipo_singular == 'Prestadora':
                if codigo_tipo_recebimento in [1, 2]:
                    return 40140
                elif codigo_tipo_recebimento == 3:
                    if nome_singular == "UNIODONTO DO BRASIL":
                        return 52631
                    else:
                        return 52632
                elif codigo_tipo_recebimento == 4:
                    return 52532
                elif codigo_tipo_recebimento == 5:
                    return 51818
                elif codigo_tipo_recebimento == 6:
                    return 51202
        # A receber
        elif tipo == 'A receber':
            if tipo_singular == 'Operadora':
                if codigo_tipo_recebimento == 1:
                    return 19958
                elif codigo_tipo_recebimento == 2:
                    return 85433
                elif codigo_tipo_recebimento in [3, 4, 5]:
                    return 84679
                elif codigo_tipo_recebimento == 6:
                    return 19253
            elif tipo_singular == 'Prestadora':
                if codigo_tipo_recebimento == 1:
                    return 19253
                elif codigo_tipo_recebimento == 2:
                    return 19253
                elif codigo_tipo_recebimento in [3, 4, 5]:
                    return 84679
                elif codigo_tipo_recebimento == 6:
                    return 19253
        return ''
    
    def calculate_credit(self, row):
        """Calcula o valor de cr√©dito baseado nas condi√ß√µes espec√≠ficas."""
        tipo = row['Tipo']
        tipo_singular = row['TipoSingular']
        codigo_tipo_recebimento = row['CodigoTipoRecebimento']
        nome_singular = str(row['NomeSingular']).upper() if pd.notnull(row['NomeSingular']) else ""
        descricao = str(row['Descricao']).upper() if pd.notnull(row['Descricao']) else ""
        
        # Novas regras para conven√ß√£o
        if "CONVENCAO" in descricao or "CONVEN√á√ÉO" in descricao:
            if tipo == 'A pagar':
                if "PAULISTA" in descricao:
                    return 22036
                else:
                    return 21898
            elif tipo == 'A receber':
                if "PAULISTA" in descricao:
                    return 19265
                else:
                    return 11021

        # Regras especiais para CodigoTipoRecebimento 5
        if codigo_tipo_recebimento == 5:
            if tipo == 'A receber':
                if "LGPD" in descricao:
                    return 30173
                elif "ATUARIO" in descricao or "ATU√ÅRIO" in descricao:
                    return 30088
            else:  # A pagar
                if "LGPD" in descricao or "ATUARIO" in descricao or "ATU√ÅRIO" in descricao:
                    return 22036

        # A pagar
        if tipo == 'A pagar':
            if tipo_singular == 'Operadora':
                if codigo_tipo_recebimento == 1:
                    return 90918
                elif codigo_tipo_recebimento == 2:
                    return 90919
                elif codigo_tipo_recebimento == 3:
                    if nome_singular == "UNIODONTO DO BRASIL":
                        return 21898
                    else:
                        return 22036
                elif codigo_tipo_recebimento == 4:
                    if nome_singular == "UNIODONTO DO BRASIL":
                        return 21898
                    else:
                        return 22036
                elif codigo_tipo_recebimento == 5:
                    return 51818
                elif codigo_tipo_recebimento == 6:
                    return 90919
            elif tipo_singular == 'Prestadora':
                if codigo_tipo_recebimento in [1, 2]:
                    return 92003
                elif codigo_tipo_recebimento == 3:
                    if nome_singular == "UNIODONTO DO BRASIL":
                        return 21898
                    else:
                        return 22036
                elif codigo_tipo_recebimento == 4:
                    if nome_singular == "UNIODONTO DO BRASIL":
                        return 21898
                    else:
                        return 22036
                elif codigo_tipo_recebimento == 5:
                    return 51818
                elif codigo_tipo_recebimento == 6:
                    return 90919
        # A receber
        elif tipo == 'A receber':
            if tipo_singular == 'Operadora':
                if codigo_tipo_recebimento == 1:
                    return 30203
                elif codigo_tipo_recebimento == 2:
                    return 40413
                elif codigo_tipo_recebimento == 3:
                    return 30069
                elif codigo_tipo_recebimento == 4:
                    return 30071
                elif codigo_tipo_recebimento == 5:
                    return 31426
                elif codigo_tipo_recebimento == 6:
                    return 30127
            elif tipo_singular == 'Prestadora':
                if codigo_tipo_recebimento == 1:
                    return 30203
                elif codigo_tipo_recebimento == 2:
                    return 40413
                elif codigo_tipo_recebimento == 3:
                    return 30069
                elif codigo_tipo_recebimento == 4:
                    return 30071
                elif codigo_tipo_recebimento == 5:
                    return 31426
                elif codigo_tipo_recebimento == 6:
                    return 30127
        return ''
    
    def calculate_history(self, row):
        """Calcula o hist√≥rico baseado nas condi√ß√µes espec√≠ficas."""
        tipo = row['Tipo']
        tipo_singular = row['TipoSingular']
        codigo_tipo_recebimento = row['CodigoTipoRecebimento']
        nome_singular = str(row['NomeSingular']).upper() if pd.notnull(row['NomeSingular']) else ""
        descricao = str(row['Descricao']).upper() if pd.notnull(row['Descricao']) else ""
        
        # Novas regras para conven√ß√£o
        if "CONVENCAO" in descricao or "CONVEN√á√ÉO" in descricao:
            if tipo == 'A pagar':
                return 2005
            elif tipo == 'A receber':
                return 1021

        # Regras especiais para CodigoTipoRecebimento 5
        if codigo_tipo_recebimento == 5:
            if tipo == 'A receber':
                if "LGPD" in descricao or "ATUARIO" in descricao or "ATU√ÅRIO" in descricao:
                    return 1021
            else:  # A pagar
                if "LGPD" in descricao or "ATUARIO" in descricao or "ATU√ÅRIO" in descricao:
                    return 2005

        # A pagar
        if tipo == 'A pagar':
            if codigo_tipo_recebimento in [1, 2, 6]:
                return 2005
            elif codigo_tipo_recebimento == 3:
                if nome_singular == "UNIODONTO DO BRASIL":
                    return 361
                else:
                    return 368
            elif codigo_tipo_recebimento == 4:
                return 365
            elif codigo_tipo_recebimento == 5:
                return 179
        # A receber
        elif tipo == 'A receber':
            if codigo_tipo_recebimento in [1, 2, 6]:
                return 1021
            elif codigo_tipo_recebimento == 3:
                return 33
            elif codigo_tipo_recebimento == 4:
                return 228
            elif codigo_tipo_recebimento == 5:
                return 30
        return ''
    
    def normalize_value(self, value):
        """Normaliza um valor para formato num√©rico, tratando adequadamente valores monet√°rios."""
        if pd.isna(value) or value == '':
            return 0
        
        if isinstance(value, (int, float)):
            return float(value)
        
        # Converter para string para processamento
        value_str = str(value).strip()
        
        # Se o valor est√° vazio ap√≥s strip
        if not value_str:
            return 0
            
        # Detectar formato monet√°rio brasileiro (com v√≠rgula como decimal)
        # Ex: "1.234,56" ou "234,56" ou "1234,56"
        if ',' in value_str and value_str.count(',') == 1:
            # Verificar se √© formato brasileiro (v√≠rgula decimal)
            partes = value_str.split(',')
            if len(partes) == 2 and len(partes[1]) <= 2 and partes[1].isdigit():
                # √â formato brasileiro (v√≠rgula decimal)
                parte_inteira = re.sub(r'[^\d]', '', partes[0])  # Remove pontos de milhares
                parte_decimal = partes[1]
                if parte_inteira == '':
                    parte_inteira = '0'
                try:
                    return float(f"{parte_inteira}.{parte_decimal}")
                except ValueError:
                    pass
        
        # Para outros casos, remover caracteres n√£o num√©ricos exceto ponto e v√≠rgula
        value_str = re.sub(r'[^\d.,]', '', value_str)
        
        # Se n√£o h√° d√≠gitos, retornar 0
        if not re.search(r'\d', value_str):
            return 0
        
        # Detectar se √© valor em formato americano (ponto como decimal)
        if '.' in value_str and ',' in value_str:
            # Formato com separadores de milhares e decimal
            # Ex: "1,234.56" (americano) ou "1.234,56" (brasileiro)
            if value_str.rfind('.') > value_str.rfind(','):
                # Ponto vem depois da v√≠rgula = formato americano
                value_str = value_str.replace(',', '')  # Remove separador de milhares
            else:
                # V√≠rgula vem depois do ponto = formato brasileiro
                value_str = value_str.replace('.', '')  # Remove separador de milhares
                value_str = value_str.replace(',', '.')  # Converte decimal
        elif ',' in value_str:
            # Apenas v√≠rgula - assumir como decimal brasileiro
        
            value_str = value_str.replace(",", ".")
        try:
            result = float(value_str)
            # Verifica√ß√£o de sanidade: se o valor for muito grande (mais de 1 milh√£o), 
            # pode ter havido convers√£o incorreta
            if result > 1000000:
                # Verificar se o valor original tinha formato monet√°rio
                original_str = str(value).strip()
                if ',' in original_str and len(original_str.split(',')[-1]) <= 2:
                    # Pode ter sido convertido incorretamente
                    # Tentar dividir por 100
                    potential_correct = result / 100
                    if potential_correct < 10000:  # Valor mais razo√°vel
                        return potential_correct
            
            return result
        except ValueError:
            return 0
    
    def process_dataframe(self, df):
        """Processa o dataframe conforme as regras estabelecidas."""
        # Verifica se o DataFrame tem as colunas necess√°rias
        required_columns = [
            'Tipo', 'CodigoSingular', 'NomeSingular', 'TipoSingular', 
            'CodigoTipoRecebimento', 'DescricaoTipoRecebimento', 
            'ValorBruto', 'IRRF', 'Descricao'
        ]
        
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            st.error(f"Colunas ausentes no arquivo: {', '.join(missing_columns)}")
            return None

        # PROTE√á√ÉO: Criar backup dos valores originais do CodigoTipoRecebimento
        df_original_backup = df.copy()
        original_codigo_tipo = df['CodigoTipoRecebimento'].copy()
        
        st.info("üîí **PROTE√á√ÉO ATIVADA**: Valores originais de CodigoTipoRecebimento foram preservados")

        # Converte CodigoTipoRecebimento para inteiro
        try:
            df['CodigoTipoRecebimento'] = pd.to_numeric(df['CodigoTipoRecebimento'], errors='coerce').fillna(6).astype(int)
            
            # VERIFICA√á√ÉO: Comparar se houve altera√ß√µes n√£o autorizadas
            try:
                original_codigo_int = pd.to_numeric(original_codigo_tipo, errors='coerce').fillna(6).astype(int)
                if not df['CodigoTipoRecebimento'].equals(original_codigo_int):
                    alteracoes = df[df['CodigoTipoRecebimento'] != original_codigo_int]
                    if len(alteracoes) > 0:
                        st.warning(f"‚ö†Ô∏è **ATEN√á√ÉO**: {len(alteracoes)} registros tiveram CodigoTipoRecebimento alterado durante a convers√£o num√©rica!")
                        st.write("Registros afetados:")
                        st.dataframe(alteracoes[['NomeSingular', 'Descricao', 'CodigoTipoRecebimento']])
            except Exception as e:
                st.info(f"Aviso na verifica√ß√£o de altera√ß√µes: {str(e)}")
                    
        except Exception as e:
            st.warning(f"Aviso ao converter CodigoTipoRecebimento: {str(e)}. Tentando continuar o processamento.")

        # SINCRONIZA√á√ÉO: Garantir consist√™ncia entre C√≥digo e Descri√ß√£o
        df = self.sync_codigo_descricao(df)

        # Aplica as fun√ß√µes para criar as colunas necess√°rias
        df['Debito'] = df.apply(self.calculate_debit, axis=1)
        df['Credito'] = df.apply(self.calculate_credit, axis=1)
        df['Historico'] = df.apply(self.calculate_history, axis=1)
        
        # Adiciona a coluna DATA com o √∫ltimo dia do m√™s anterior
        df['DATA'] = self.last_day_of_previous_month
        
        # Adiciona a coluna valor com os dados de ValorBruto
        df['valor'] = df['ValorBruto']
        
        # PROTE√á√ÉO EXTRA: Preservar valores originais de ValorBruto para evitar convers√µes incorretas
        original_valor_bruto = df['ValorBruto'].copy()
        
        # Normaliza e converte a coluna valor para float
        df['valor'] = df['valor'].apply(self.normalize_value)
        
        # VERIFICA√á√ÉO: Detectar valores convertidos incorretamente (muito grandes)
        problematic_values = df[df['valor'] > 100000]  # Valores maiores que 100k s√£o suspeitos
        if len(problematic_values) > 0:
            st.warning(f"‚ö†Ô∏è **ATEN√á√ÉO**: {len(problematic_values)} valores parecem ter sido convertidos incorretamente (muito grandes)")
            
            # Tentar corrigir valores problem√°ticos
            for idx in problematic_values.index:
                original_val = original_valor_bruto.iloc[idx]
                converted_val = df.loc[idx, 'valor']
                
                # Se o valor original era uma string com v√≠rgula como decimal
                if isinstance(original_val, str) and ',' in str(original_val):
                    # Tentar reconverter usando l√≥gica mais cuidadosa
                    corrected_val = self.normalize_value(original_val)
                    
                    # Se ainda est√° muito grande, tentar dividir por 100
                    if corrected_val > 10000:
                        corrected_val = corrected_val / 100
                    
                    df.loc[idx, 'valor'] = corrected_val
                    st.info(f"üîß Valor corrigido: {original_val} ‚Üí {corrected_val} (era {converted_val})")
                elif converted_val > 10000:
                    # Para valores num√©ricos muito grandes, tentar dividir por 100
                    corrected_val = converted_val / 100
                    df.loc[idx, 'valor'] = corrected_val
                    st.info(f"üîß Valor corrigido: {converted_val} ‚Üí {corrected_val}")
        
        # Cria a coluna complemento com o formato especificado + tipo
        df['complemento'] = (df['NomeSingular'].fillna('') + " | " + 
                           df['DescricaoTipoRecebimento'].fillna('') + " | " + 
                           df['Descricao'].fillna('') + " | " + 
                           df['Tipo'].fillna(''))
        
        # AJUSTE PROVIS√ìRIO: Verifica√ß√£o de inconsist√™ncias na concilia√ß√£o da c√¢mara
        # Quando CodigoTipoRecebimento = 2, DescricaoTipoRecebimento = "Repasse em Custo Operacional"
        # e Descri√ß√£o cont√©m "Mensalidade" ou "Mensalidades"
        # IMPORTANTE: Esta regra N√ÉO altera o CodigoTipoRecebimento, apenas marca como inconsistente
        def verificar_inconsistencia(row):
            if (row['CodigoTipoRecebimento'] == 2 and 
                str(row['DescricaoTipoRecebimento']).strip() == 'Repasse em Custo Operacional' and
                ('mensalidade' in str(row['Descricao']).lower() or 'mensalidades' in str(row['Descricao']).lower())):
                return "*** Lan√ßamento Inconsistente, verifique | " + str(row['complemento'])
            else:
                return row['complemento']
        
        # Aplicar a verifica√ß√£o de inconsist√™ncia
        df['complemento'] = df.apply(verificar_inconsistencia, axis=1)
        
        # VERIFICA√á√ÉO FINAL: Garantir que CodigoTipoRecebimento n√£o foi alterado
        try:
            final_codigo_tipo = df['CodigoTipoRecebimento'].copy()
            original_codigo_int = pd.to_numeric(original_codigo_tipo, errors='coerce').fillna(6).astype(int)
            
            if not final_codigo_tipo.equals(original_codigo_int):
                alteracoes_finais = df[df['CodigoTipoRecebimento'] != original_codigo_int]
                if len(alteracoes_finais) > 0:
                    st.error(f"üö® **ERRO CR√çTICO**: {len(alteracoes_finais)} registros tiveram CodigoTipoRecebimento alterado sem autoriza√ß√£o!")
                    st.write("**Registros com altera√ß√µes n√£o autorizadas:**")
                    for idx, row in alteracoes_finais.iterrows():
                        original_val = original_codigo_int.iloc[idx]
                        new_val = row['CodigoTipoRecebimento']
                        st.write(f"- {row['NomeSingular']}: {original_val} ‚Üí {new_val} (Descri√ß√£o: {row['Descricao']})")
                    
                    # Restaurar valores originais
                    df['CodigoTipoRecebimento'] = original_codigo_int
                    st.success("‚úÖ **VALORES RESTAURADOS**: CodigoTipoRecebimento foi restaurado aos valores originais")
        except Exception as e:
            st.info(f"Aviso na verifica√ß√£o final: {str(e)}")
        
        # Cria o DataFrame para exporta√ß√£o
        df_export = df[['Debito', 'Credito', 'Historico', 'DATA', 'valor', 'complemento']].copy()
        
        # Adiciona registros baseados na condi√ß√£o IRRF
        irrf_rows = []
        for index, row in df.iterrows():
            irrf_value = self.normalize_value(row['IRRF'])
            if irrf_value > 0:
                if row['Tipo'] == 'A pagar':
                    debito_irrf = df_export.iloc[index]['Credito']
                    credito_irrf = 23476
                    historico_irrf = 2341
                elif row['Tipo'] == 'A receber':
                    debito_irrf = 15456
                    credito_irrf = df_export.iloc[index]['Debito']
                    historico_irrf = 22
                
                irrf_rows.append({
                    'Debito': debito_irrf,
                    'Credito': credito_irrf,
                    'Historico': historico_irrf,
                    'DATA': self.last_day_of_previous_month,
                    'valor': irrf_value,
                    'complemento': (str(row['NomeSingular']) if pd.notnull(row['NomeSingular']) else '') + 
                                 " | " + (str(row['DescricaoTipoRecebimento']) if pd.notnull(row['DescricaoTipoRecebimento']) else '') +
                                 " | " + (str(row['Descricao']) if pd.notnull(row['Descricao']) else '') + 
                                 " | " + (str(row['Tipo']) if pd.notnull(row['Tipo']) else '') + " | IRRF"
                })
        
        # Adiciona as linhas de IRRF ao DataFrame de exporta√ß√£o
        if irrf_rows:
            df_export = pd.concat([df_export, pd.DataFrame(irrf_rows)], ignore_index=True)
        
        # Formata a coluna DATA para o formato brasileiro (dd/mm/yyyy)
        df_export['DATA'] = pd.to_datetime(df_export['DATA']).dt.strftime('%d/%m/%Y')
        
        # Preservar tamb√©m as colunas originais para filtros
        if 'TipoSingular' in df.columns:
            df_export['TipoSingular'] = df['TipoSingular']
        if 'CodigoTipoRecebimento' in df.columns:
            df_export['CodigoTipoRecebimento'] = df['CodigoTipoRecebimento']
        if 'Tipo' in df.columns:
            df_export['Tipo'] = df['Tipo']
        if 'NomeSingular' in df.columns:
            df_export['NomeSingular'] = df['NomeSingular']
        if 'DescricaoTipoRecebimento' in df.columns:
            df_export['DescricaoTipoRecebimento'] = df['DescricaoTipoRecebimento']
        if 'Descricao' in df.columns:
            df_export['Descricao'] = df['Descricao']
        if 'ValorBruto' in df.columns:
            df_export['ValorBruto'] = df['ValorBruto']
        if 'IRRF' in df.columns:
            df_export['IRRF'] = df['IRRF']
        
        return df_export
    
    def create_download_link(self, df, filename):
        """Cria um link para download do DataFrame como CSV."""
        csv_string = self.df_to_csv_string(df)
        b64 = base64.b64encode(csv_string.encode('utf-8')).decode()
        href = f'<a href="data:file/csv;base64,{b64}" download="{filename}" class="download-button">Baixar {filename}</a>'
        return href
    
    def df_to_csv_string(self, df):
        """Converte DataFrame para string CSV no formato brasileiro."""
        csv_buffer = io.StringIO()
        
        # Cria uma c√≥pia do dataframe para exporta√ß√£o
        export_df = df.copy()
        
        # Para arquivos cont√°beis, filtrar apenas as 6 colunas espec√≠ficas
        if all(col in export_df.columns for col in ['Debito', 'Credito', 'Historico', 'DATA', 'valor', 'complemento']):
            # Arquivo cont√°bil: apenas as 6 colunas espec√≠ficas
            export_df = export_df[['Debito', 'Credito', 'Historico', 'DATA', 'valor', 'complemento']].copy()
            
            # Renomear DATA para data
            export_df = export_df.rename(columns={'DATA': 'data'})
            
            # Recriar o campo complemento com dados atualizados
            if all(col in df.columns for col in ['NomeSingular', 'DescricaoTipoRecebimento', 'Descricao']):
                # Verificar se existe flag de IRRF no complemento
                irrf_mask = export_df['complemento'].str.contains('IRRF', na=False)
                
                # Para registros normais, recriar o complemento
                normal_mask = ~irrf_mask
                if normal_mask.any():
                    # Mapear os √≠ndices corretos
                    for idx in export_df[normal_mask].index:
                        if idx < len(df):
                            original_row = df.iloc[idx]
                            nome = str(original_row['NomeSingular']) if pd.notnull(original_row['NomeSingular']) else ''
                            desc_tipo = str(original_row['DescricaoTipoRecebimento']) if pd.notnull(original_row['DescricaoTipoRecebimento']) else ''
                            desc = str(original_row['Descricao']) if pd.notnull(original_row['Descricao']) else ''
                            
                            # Verificar inconsist√™ncias
                            if (original_row.get('CodigoTipoRecebimento') == 2 and 
                                str(original_row.get('DescricaoTipoRecebimento', '')).strip() == 'Repasse em Custo Operacional' and
                                ('mensalidade' in str(original_row.get('Descricao', '')).lower() or 'mensalidades' in str(original_row.get('Descricao', '')).lower())):
                                tipo = str(original_row.get('Tipo', '')) if pd.notnull(original_row.get('Tipo')) else ''
                                export_df.at[idx, 'complemento'] = f"*** Lan√ßamento Inconsistente, verifique | {nome} | {desc_tipo} | {desc} | {tipo}"
                            else:
                                tipo = str(original_row.get('Tipo', '')) if pd.notnull(original_row.get('Tipo')) else ''
                                export_df.at[idx, 'complemento'] = f"{nome} | {desc_tipo} | {desc} | {tipo}"
        else:
            # Arquivo original: remover apenas colunas extras de controle
            if 'TipoSingular' in export_df.columns:
                export_df = export_df.drop(['TipoSingular', 'CodigoTipoRecebimento', 'Tipo'], axis=1, errors='ignore')
        
        # Escreve o cabe√ßalho
        csv_buffer.write(';'.join(export_df.columns) + '\n')
        
        # Escreve as linhas sem aspas
        for _, row in export_df.iterrows():
            line_values = []
            for col, val in row.items():
                # Formata valores num√©ricos com v√≠rgula decimal
                if col == 'valor' and isinstance(val, (int, float)):
                    line_values.append(f"{val:.2f}".replace('.', ','))
                elif isinstance(val, (int, float)) and col not in ['Debito', 'Credito', 'Historico']:
                    line_values.append(str(val).replace('.', ','))
                else:
                    line_values.append(str(val))
            csv_buffer.write(';'.join(line_values) + '\n')
        
        return csv_buffer.getvalue()
    
    def create_default_columns(self, df):
        """Cria colunas padr√£o quando est√£o ausentes."""
        # Colunas obrigat√≥rias com valores padr√£o
        default_values = {
            'Tipo': 'A receber',  # Valor padr√£o
            'CodigoSingular': 0,
            'NomeSingular': 'N√£o informado',
            'TipoSingular': 'Operadora',  # Valor padr√£o mais comum
            'CodigoTipoRecebimento': 6,  # Outras
            'DescricaoTipoRecebimento': 'Outras',
            'ValorBruto': 0.0,
            'IRRF': 0.0,
            'Descricao': 'Importado automaticamente'
        }
        
        # Adicionar colunas ausentes com valores padr√£o
        for col, default_val in default_values.items():
            if col not in df.columns:
                df[col] = default_val
                st.warning(f"‚ö†Ô∏è Coluna '{col}' n√£o encontrada. Usando valor padr√£o: {default_val}")
        
        return df
    
    def detect_simplified_format(self, df):
        """Detecta formato simplificado de relat√≥rio financeiro."""
        available_columns = df.columns.tolist()
        
        # Verificar se √© o formato simplificado (com colunas como Vencimento, C√≥digo, Nome, etc.)
        simplified_indicators = [
            'Vencimento' in available_columns,
            'C√≥digo' in available_columns,
            'Nome' in available_columns,
            'Tipo' in available_columns,
            any('Valor a Receber' in col or 'Valor a Pagar' in col for col in available_columns)
        ]
        
        if sum(simplified_indicators) >= 4:
            st.info("üìã **Formato Simplificado Detectado**")
            st.info("Este arquivo parece ser um relat√≥rio financeiro simplificado. Convertendo para o formato da C√¢mara de Compensa√ß√£o...")
            
            # Criar DataFrame mapeado para o formato da C√¢mara
            df_mapped = df.copy()
            
            # Mapeamentos b√°sicos
            column_mapping = {}
            if 'Nome' in available_columns:
                column_mapping['Nome'] = 'NomeSingular'
            if 'C√≥digo' in available_columns:
                column_mapping['C√≥digo'] = 'CodigoSingular'
            if 'Tipo' in available_columns:
                column_mapping['Tipo'] = 'Tipo'
            
            # Aplicar mapeamentos
            df_mapped = df_mapped.rename(columns=column_mapping)
            
            # Determinar o valor bruto baseado no tipo
            if 'Valor a Receber' in available_columns and 'Valor a Pagar' in available_columns:
                def calculate_valor_bruto(row):
                    valor_receber = self.normalize_value(row.get('Valor a Receber', 0))
                    valor_pagar = self.normalize_value(row.get('Valor a Pagar', 0))
                    return valor_receber if valor_receber > 0 else valor_pagar
                
                df_mapped['ValorBruto'] = df.apply(calculate_valor_bruto, axis=1)
            
            # Criar colunas padr√£o necess√°rias
            default_values = {
                'TipoSingular': 'Operadora',
                'CodigoTipoRecebimento': 6,  # Outras
                'DescricaoTipoRecebimento': 'Outras',
                'IRRF': 0.0,
                'Descricao': 'Importado de relat√≥rio simplificado'
            }
            
            for col, default_val in default_values.items():
                if col not in df_mapped.columns:
                    df_mapped[col] = default_val
            
            # Ajustar tipo baseado nos valores
            if 'Valor a Receber' in available_columns and 'Valor a Pagar' in available_columns:
                def determine_tipo(row):
                    valor_receber = self.normalize_value(row.get('Valor a Receber', 0))
                    valor_pagar = self.normalize_value(row.get('Valor a Pagar', 0))
                    return 'A receber' if valor_receber > 0 else 'A pagar'
                
                df_mapped['Tipo'] = df.apply(determine_tipo, axis=1)
            
            return df_mapped, "‚úÖ Formato simplificado convertido para C√¢mara de Compensa√ß√£o"
        
        return None, "N√£o √© formato simplificado"
    
    def detect_csv_format(self, df):
        """Detecta o formato do CSV e tenta mapear as colunas."""
        # Colunas esperadas pelo sistema
        expected_columns = [
            'Tipo', 'CodigoSingular', 'NomeSingular', 'TipoSingular', 
            'CodigoTipoRecebimento', 'DescricaoTipoRecebimento', 
            'ValorBruto', 'IRRF', 'Descricao'
        ]
        
        # Verificar se j√° est√° no formato correto
        if all(col in df.columns for col in expected_columns):
            return df, "Formato padr√£o da C√¢mara de Compensa√ß√£o detectado"
        
        # Colunas dispon√≠veis no arquivo
        available_columns = df.columns.tolist()
        
        # Primeiro, tentar detectar formato simplificado
        simplified_result, simplified_message = self.detect_simplified_format(df)
        if simplified_result is not None:
            return simplified_result, simplified_message
        
        # Verificar se √© um arquivo da C√¢mara de Compensa√ß√£o v√°lido
        # Deve ter pelo menos algumas colunas essenciais
        essential_indicators = [
            any('tipo' in col.lower() for col in available_columns),
            any('singular' in col.lower() for col in available_columns),
            any('valor' in col.lower() for col in available_columns),
            any('recebimento' in col.lower() for col in available_columns)
        ]
        
        # Se n√£o tem pelo menos 2 indicadores essenciais, n√£o √© arquivo da C√¢mara
        if sum(essential_indicators) < 2:
            return None, f"""
            ‚ùå ARQUIVO N√ÉO COMPAT√çVEL COM C√ÇMARA DE COMPENSA√á√ÉO
            
            Este arquivo n√£o parece ser um CSV da C√¢mara de Compensa√ß√£o Uniodonto.
            
            üìã Formato esperado deve conter colunas como:
            ‚Ä¢ Tipo (A pagar/A receber)
            ‚Ä¢ NomeSingular (Nome da cooperativa)
            ‚Ä¢ CodigoTipoRecebimento (1-6)
            ‚Ä¢ ValorBruto (Valor da transa√ß√£o)
            ‚Ä¢ IRRF (Imposto retido)
            
            üìÅ Colunas encontradas no seu arquivo:
            {', '.join(available_columns)}
            
            üí° Verifique se est√° usando o arquivo correto da C√¢mara de Compensa√ß√£o.
            """
        
        # Tentar mapear colunas similares
        column_mapping = {}
        
        # Mapeamentos poss√≠veis para arquivos da C√¢mara
        possible_mappings = {
            'Tipo': ['tipo', 'Type', 'TIPO'],
            'CodigoSingular': ['codigo_singular', 'codigo singular', 'CodSingular', 'CODIGO_SINGULAR'],
            'NomeSingular': ['nome_singular', 'nome singular', 'NomeSing', 'NOME_SINGULAR', 'Nome'],
            'TipoSingular': ['tipo_singular', 'tipo singular', 'TipoSing', 'TIPO_SINGULAR'],
            'CodigoTipoRecebimento': ['codigo_tipo_recebimento', 'cod_tipo_receb', 'CodTipoReceb', 'CODIGO_TIPO_RECEBIMENTO'],
            'DescricaoTipoRecebimento': ['descricao_tipo_recebimento', 'desc_tipo_receb', 'DescTipoReceb', 'DESCRICAO_TIPO_RECEBIMENTO'],
            'ValorBruto': ['valor_bruto', 'valor bruto', 'Valor', 'VALOR_BRUTO', 'ValorTotal'],
            'IRRF': ['irrf', 'ir', 'IR', 'ImpostoRenda'],
            'Descricao': ['descricao', 'desc', 'Desc', 'DESCRICAO', 'Observacao']
        }
        
        # Tentar encontrar correspond√™ncias
        for expected_col, possible_names in possible_mappings.items():
            for possible_name in possible_names:
                if possible_name in available_columns:
                    column_mapping[possible_name] = expected_col
                    break
        
        # Se encontrou mapeamentos suficientes, aplicar
        if len(column_mapping) >= 5:  # Pelo menos 5 colunas mapeadas
            df_mapped = df.rename(columns=column_mapping)
            
            # Verificar se ainda faltam colunas ap√≥s o mapeamento
            missing_after_mapping = [col for col in expected_columns if col not in df_mapped.columns]
            
            if missing_after_mapping:
                # S√≥ criar colunas padr√£o se for um n√∫mero pequeno de colunas ausentes
                if len(missing_after_mapping) <= 3:
                    df_mapped = self.create_default_columns(df_mapped)
                    return df_mapped, f"‚úÖ Mapeamento aplicado: {column_mapping}. Colunas padr√£o criadas para: {', '.join(missing_after_mapping)}"
                else:
                    return None, f"‚ùå Muitas colunas ausentes ap√≥s mapeamento: {', '.join(missing_after_mapping)}"
            
            return df_mapped, f"‚úÖ Mapeamento aplicado com sucesso: {column_mapping}"
        
        # Se n√£o conseguiu mapear suficientemente, retornar erro detalhado
        return None, f"""
        ‚ùå FORMATO N√ÉO RECONHECIDO
        
        N√£o foi poss√≠vel mapear as colunas automaticamente.
        
        üìÅ Colunas dispon√≠veis no arquivo:
        {', '.join(available_columns)}
        
        üìã Colunas esperadas pela C√¢mara de Compensa√ß√£o:
        {', '.join(expected_columns)}
        
        üí° Verifique se o arquivo est√° no formato correto ou renomeie as colunas conforme necess√°rio.
        """
    
    def show_file_preview(self, df, filename):
        """Mostra uma pr√©via do arquivo para o usu√°rio confirmar."""
        st.write(f"### Pr√©via do arquivo: {filename}")
        
        # Informa√ß√µes b√°sicas
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total de linhas", len(df))
        with col2:
            st.metric("Total de colunas", len(df.columns))
        with col3:
            # Verificar se tem valores num√©ricos
            numeric_cols = df.select_dtypes(include=[np.number]).columns
            st.metric("Colunas num√©ricas", len(numeric_cols))
        
        # Mostrar colunas dispon√≠veis
        st.write("**Colunas dispon√≠veis:**")
        st.write(", ".join(df.columns.tolist()))
        
        # Mostrar primeiras linhas
        st.write("**Primeiras 5 linhas:**")
        st.dataframe(df.head())
        
        # Verificar se tem dados que parecem valores monet√°rios
        potential_value_columns = []
        for col in df.columns:
            if any(keyword in col.lower() for keyword in ['valor', 'value', 'preco', 'price', 'montante', 'amount']):
                potential_value_columns.append(col)
        
        if potential_value_columns:
            st.write(f"**Colunas que podem conter valores:** {', '.join(potential_value_columns)}")
        
        return True
    
    def process_csv_file(self, uploaded_file):
        """Processa um arquivo CSV carregado."""
        try:
            # Lista de encodings para tentar
            encodings = ['utf-8', 'latin1', 'iso-8859-1', 'windows-1252', 'cp1252']
            separators = [';', ',']
            
            # Tenta diferentes combina√ß√µes de encoding e separador
            for encoding in encodings:
                for sep in separators:
                    try:
                        uploaded_file.seek(0)  # Volta ao in√≠cio do arquivo
                        df = pd.read_csv(uploaded_file, sep=sep, encoding=encoding)
                        # Se chegou aqui, conseguiu ler o arquivo
                        break
                    except:
                        continue
                else:
                    continue
                break
            else:
                # Se nenhuma combina√ß√£o funcionou, tenta detectar o separador
                uploaded_file.seek(0)
                sample = uploaded_file.read(1024).decode('utf-8', errors='ignore')
                sep = ',' if ',' in sample and ';' not in sample else ';'
                uploaded_file.seek(0)
                df = pd.read_csv(uploaded_file, sep=sep, encoding='utf-8', on_bad_lines='skip')
            
            # Processa o DataFrame
            mapped_df, mapping_info = self.detect_csv_format(df)
            if mapped_df is not None:
                # Exibir informa√ß√£o sobre o mapeamento
                if "Mapeamento aplicado" in mapping_info:
                    st.info(f"‚úÖ {mapping_info}")
                elif "Formato padr√£o" in mapping_info:
                    st.success(f"‚úÖ {mapping_info}")
                
                # Processar o DataFrame mapeado
                processed_df = self.process_dataframe(mapped_df)
                if processed_df is not None:
                    self.processed_files.append(uploaded_file.name)
                    return processed_df, mapped_df  # Retorna tamb√©m o DataFrame original mapeado
                else:
                    self.error_files.append(uploaded_file.name)
                    return None, None
            else:
                # Erro no mapeamento
                self.error_files.append(uploaded_file.name)
                st.error(f"‚ùå {mapping_info}")
                return None, None
        except Exception as e:
            self.error_files.append(uploaded_file.name)
            st.error(f"Erro ao processar o arquivo {uploaded_file.name}: {str(e)}")
            return None, None
    
    def debug_report_data(self, df, report_name):
        """Fun√ß√£o de debug para verificar dados dos relat√≥rios."""
        st.write(f"### Debug - {report_name}")
        
        # Verificar colunas dispon√≠veis
        st.write("**Colunas dispon√≠veis:**", list(df.columns))
        
        # Verificar valores √∫nicos em colunas importantes
        if 'CodigoTipoRecebimento' in df.columns:
            st.write("**C√≥digos de tipo de recebimento:**", sorted(df['CodigoTipoRecebimento'].unique()))
        
        if 'TipoSingular' in df.columns:
            st.write("**Tipos de singular:**", sorted(df['TipoSingular'].unique()))
        
        if 'Tipo' in df.columns:
            st.write("**Tipos:**", sorted(df['Tipo'].unique()))
        
        # Mostrar primeiras linhas
        st.write("**Primeiras 3 linhas:**")
        st.dataframe(df.head(3))
        
        st.write("---")

    def generate_accounting_reports(self, df, output_dir=None, display_result=False, debug=False):
        """
        Gera relat√≥rios espec√≠ficos solicitados pelo contador.
        
        Relat√≥rios gerados:
        1. Taxas de Manuten√ß√£o (3) - Para todas (operadoras e prestadoras)
        2. Taxas de Marketing (4) - Para todas
        3. Multas e Juros (5) - Para todas
        4. Outras (6) - Para todas
        5. Pr√©-pagamento (1) - Somente operadoras
        6. Custo Operacional (2) - Somente operadoras
        7. Pr√©-pagamento (1) - Somente prestadoras
        8. Custo Operacional (2) - Somente prestadoras
        """
        import tempfile
        
        # Usar diret√≥rio tempor√°rio se n√£o for especificado
        if output_dir is None:
            output_dir = tempfile.mkdtemp()
        else:
            os.makedirs(output_dir, exist_ok=True)
        
        # Definir os relat√≥rios a serem gerados - CORRIGIDO
        reports_config = [
            {"name": "taxas_manutencao", "title": "Relat√≥rio de Taxas de Manuten√ß√£o (3)", 
            "filters": {"CodigoTipoRecebimento": 3}},
            
            {"name": "taxas_marketing", "title": "Relat√≥rio de Taxas de Marketing (4)", 
            "filters": {"CodigoTipoRecebimento": 4}},
            
            {"name": "multas_juros", "title": "Relat√≥rio de Multas e Juros (5)", 
            "filters": {"CodigoTipoRecebimento": 5}},
            
            {"name": "outras", "title": "Relat√≥rio de Outras (6)", 
            "filters": {"CodigoTipoRecebimento": 6}},
            
            {"name": "pre_pagamento_operadoras", "title": "Relat√≥rio de Pr√©-pagamento (1) - Operadoras", 
            "filters": {"CodigoTipoRecebimento": 1, "TipoSingular": "Operadora"}},
            
            {"name": "custo_operacional_operadoras", "title": "Relat√≥rio de Custo Operacional (2) - Operadoras", 
            "filters": {"CodigoTipoRecebimento": 2, "TipoSingular": "Operadora"}},
            
            {"name": "pre_pagamento_prestadoras", "title": "Relat√≥rio de Pr√©-pagamento (1) - Prestadoras", 
            "filters": {"CodigoTipoRecebimento": 1, "TipoSingular": "Prestadora"}},
            
            {"name": "custo_operacional_prestadoras", "title": "Relat√≥rio de Custo Operacional (2) - Prestadoras", 
            "filters": {"CodigoTipoRecebimento": 2, "TipoSingular": "Prestadora"}}
        ]
        
        # Dicion√°rio para armazenar resultados
        results = {}
        pdf_files = []
        csv_files = []

        # Configurar estilos para o PDF
        styles = getSampleStyleSheet()
        
        # Criar estilo personalizado para c√©lulas da tabela
        cell_style = styles['Normal'].clone('CellStyle')
        cell_style.fontSize = 7
        cell_style.leading = 9
        cell_style.alignment = 0  # Alinhamento √† esquerda
        cell_style.wordWrap = 'CJK'
        
        # Verificar se temos as colunas necess√°rias
        required_columns = ['CodigoTipoRecebimento', 'TipoSingular', 'Tipo', 'DATA', 'valor', 'complemento', 'Debito', 'Credito', 'Historico']
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            raise ValueError(f"Colunas ausentes no DataFrame: {', '.join(missing_columns)}")
        
        # Iterar sobre cada configura√ß√£o de relat√≥rio
        for report_config in reports_config:
            # Filtrar os dados conforme os crit√©rios
            filtered_df = df.copy()
            
            # Debug se solicitado
            if debug:
                self.debug_report_data(filtered_df, f"Antes do filtro - {report_config['title']}")
            
            for key, value in report_config["filters"].items():
                if key in filtered_df.columns:
                    filtered_df = filtered_df[filtered_df[key] == value]
                else:
                    if display_result:
                        st.warning(f"Coluna {key} n√£o encontrada para o relat√≥rio {report_config['title']}")
                    continue
            
            # Debug ap√≥s filtros se solicitado
            if debug:
                self.debug_report_data(filtered_df, f"Ap√≥s filtros - {report_config['title']}")
            
            # Se n√£o h√° dados para este relat√≥rio, continuar para o pr√≥ximo
            if filtered_df.empty:
                if display_result:
                    st.warning(f"Nenhum dado encontrado para {report_config['title']}")
                results[report_config["name"]] = {"count": 0, "sum": 0, "file": None}
                continue
            
            # Nome do arquivo
            csv_file = os.path.join(output_dir, f"{report_config['name']}.csv")
            pdf_file = os.path.join(output_dir, f"{report_config['name']}.pdf")
            
            # Exportar para CSV
            self.export_to_csv(filtered_df, csv_file)
            
            # Adicionar descri√ß√µes das contas cont√°beis
            filtered_df['Debito_Desc'] = filtered_df['Debito'].apply(
                lambda x: f"{x} - {NOMES_CONTAS_CONTABEIS.get(int(x), 'Descri√ß√£o n√£o encontrada')}" if pd.notnull(x) and str(x).isdigit() else "")
            
            filtered_df['Credito_Desc'] = filtered_df['Credito'].apply(
                lambda x: f"{x} - {NOMES_CONTAS_CONTABEIS.get(int(x), 'Descri√ß√£o n√£o encontrada')}" if pd.notnull(x) and str(x).isdigit() else "")
            
            filtered_df['Historico_Desc'] = filtered_df['Historico'].apply(
                lambda x: f"{x} - {NOMES_CONTAS_CONTABEIS.get(int(x), 'Descri√ß√£o n√£o encontrada')}" if pd.notnull(x) and str(x).isdigit() else "")
            
            # Gerar PDF com totaliza√ß√µes
            doc = SimpleDocTemplate(pdf_file, pagesize=letter, leftMargin=1.2*cm, rightMargin=1.2*cm, topMargin=1.2*cm, bottomMargin=1.2*cm)
            elements = []
            
            # T√≠tulo
            elements.append(Paragraph(report_config["title"], styles['Title']))
            elements.append(Spacer(1, 0.25 * inch))
            
            # Dados do relat√≥rio
            date_str = filtered_df['DATA'].iloc[0] if not filtered_df.empty else ""
            elements.append(Paragraph(f"Data de refer√™ncia: {date_str}", styles['Normal']))
            elements.append(Spacer(1, 0.15 * inch))
            
            # Totaliza√ß√µes
            record_count = len(filtered_df)
            total_value = filtered_df['valor'].sum()
            
            # Tabela de resumo
            summary_data = [
                ["Total de registros", str(record_count)],
                ["Valor total", f"R$ {total_value:.2f}".replace('.', ',')]
            ]
            
            summary_table = Table(summary_data, colWidths=[1.5*inch, 1.5*inch])
            summary_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, -1), colors.white),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                ('ALIGN', (1, 0), (1, -1), 'RIGHT')
            ]))
            
            elements.append(summary_table)
            elements.append(Spacer(1, 0.25 * inch))
            
            # Tabela com os registros
            # Selecionar e reordenar colunas para o relat√≥rio
            display_df = filtered_df[['DATA', 'complemento', 'valor', 'Debito_Desc', 'Credito_Desc', 'Historico_Desc']].copy()
            display_df.columns = ['Data', 'Complemento', 'Valor', 'D√©bito', 'Cr√©dito', 'Hist√≥rico']
            
            # Converter para lista para o relat√≥rio PDF
            data = [display_df.columns.tolist()]
            for _, row in display_df.iterrows():
                row_data = []
                for i, (col, val) in enumerate(row.items()):
                    if col == 'Valor' and isinstance(val, (int, float)):
                        val = f"R$ {val:.2f}".replace('.', ',')
                    elif col == 'Complemento':
                        # Usar fun√ß√£o auxiliar para quebra inteligente de linhas
                        val_str = str(val)
                        complemento_formatado = self.truncate_lines(val_str, max_chars_per_line=40, max_lines=3)
                        val = Paragraph(complemento_formatado, cell_style)
                    elif col in ['D√©bito', 'Cr√©dito']:
                        # Quebrar descri√ß√µes de contas em linhas
                        val_str = str(val)
                        if len(val_str) > 50:
                            # Quebrar na primeira quebra natural (h√≠fen ou espa√ßo)
                            if ' - ' in val_str:
                                parts = val_str.split(' - ', 1)
                                if len(parts) == 2:
                                    text_content = f"{parts[0]}<br/>{parts[1][:30]}{'...' if len(parts[1]) > 30 else ''}"
                                else:
                                    text_content = val_str[:50] + '...'
                            else:
                                # Quebrar por palavras
                                words = val_str.split()
                                line1 = ""
                                line2 = ""
                                for word in words:
                                    if len(line1 + " " + word) <= 25:
                                        line1 += " " + word if line1 else word
                                    elif len(line2 + " " + word) <= 25:
                                        line2 += " " + word if line2 else word
                                    else:
                                        break
                                text_content = f"{line1}<br/>{line2}{'...' if len(' '.join(words)) > len(line1 + line2) else ''}"
                            val = Paragraph(text_content, cell_style)
                        else:
                            val = Paragraph(val_str, cell_style)
                    elif col == 'Hist√≥rico':
                        # Hist√≥rico pode ser mais compacto
                        val_str = str(val)
                        if len(val_str) > 25:
                            val = Paragraph(val_str[:22] + '...', cell_style)
                        else:
                            val = Paragraph(val_str, cell_style)
                    else:
                        val = str(val)
                    
                    row_data.append(val)
                data.append(row_data)
            
            # Adicionar linha de total no final
            total_row = ['', 'TOTAL', f"R$ {total_value:.2f}".replace('.', ','), '', '', '']
            data.append(total_row)
            
            # Criar tabela com larguras de coluna otimizadas para retrato A4
            col_widths = [0.6*inch, 1.8*inch, 0.7*inch, 1.4*inch, 1.4*inch, 0.8*inch]
            
            # Estilo da tabela melhorado
            table_style = TableStyle([
                # Cabe√ßalho
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 9),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
                ('TOPPADDING', (0, 0), (-1, 0), 8),
                
                # Dados
                ('BACKGROUND', (0, 1), (-1, -2), colors.white),
                ('ALIGN', (0, 1), (0, -1), 'CENTER'),  # Data centralizada
                ('ALIGN', (2, 1), (2, -1), 'RIGHT'),   # Valor √† direita
                
                # Linha de total
                ('BACKGROUND', (0, -1), (-1, -1), colors.lightgrey),
                ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, -1), (-1, -1), 8),
                ('ALIGN', (2, -1), (2, -1), 'RIGHT'),  # Total √† direita
                
                # Borda
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                
                # Alinhamento vertical
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                
                # Padding interno das c√©lulas
                ('LEFTPADDING', (0, 0), (-1, -1), 4),
                ('RIGHTPADDING', (0, 0), (-1, -1), 4),
                ('TOPPADDING', (0, 1), (-1, -1), 6),
                ('BOTTOMPADDING', (0, 1), (-1, -1), 6),
                
                # Altura m√≠nima das linhas para acomodar texto quebrado
                ('ROWBACKGROUNDS', (0, 1), (-1, -2), [colors.white, colors.lightgrey]),
            ])

            # Criar tabela com configura√ß√µes melhoradas
            table = Table(data, colWidths=col_widths, repeatRows=1, splitByRow=True, rowHeights=None)

            # Aplicar o estilo √† tabela
            table.setStyle(table_style)
            elements.append(table)
            
            # Adicionar informa√ß√µes adicionais
            elements.append(Spacer(1, 0.5 * inch))
            elements.append(Paragraph(f"Relat√≥rio gerado em: {datetime.now().strftime('%d/%m/%Y %H:%M')}", styles['Normal']))
            
            # Gerar o PDF
            doc.build(elements)
            
            # Armazenar os resultados
            results[report_config["name"]] = {
                "count": record_count,
                "sum": total_value,
                "file": pdf_file
            }
            
            pdf_files.append(pdf_file)
            csv_files.append(csv_file)
            
            if display_result:
                st.success(f"‚úÖ Relat√≥rio gerado: {report_config['title']} - {record_count} registros, Total: R$ {total_value:.2f}")
        
        # Criar um relat√≥rio de resumo geral
        summary_file = os.path.join(output_dir, "resumo_relatorios.pdf")
        doc = SimpleDocTemplate(summary_file, pagesize=letter)
        elements = []
        
        # T√≠tulo
        elements.append(Paragraph("Resumo dos Relat√≥rios Cont√°beis", styles['Title']))
        elements.append(Spacer(1, 0.5 * inch))
        
        # Tabela de resumo
        summary_data = [["Relat√≥rio", "Registros", "Valor Total"]]
        total_overall = 0
        
        for report_config in reports_config:
            report_name = report_config["name"]
            if report_name in results:
                report_result = results[report_name]
                summary_data.append([
                    report_config["title"],
                    str(report_result["count"]),
                    f"R$ {report_result['sum']:.2f}".replace('.', ',')
                ])
                total_overall += report_result["sum"]
        
        # Adicionar linha de total geral
        summary_data.append(["TOTAL GERAL", "", f"R$ {total_overall:.2f}".replace('.', ',')])
        
        # Criar tabela (ajustada para formato retrato A4)
        summary_table = Table(summary_data, colWidths=[3*inch, 0.8*inch, 1.2*inch])
        
        # Estilo da tabela
        summary_style = TableStyle([
            # Cabe√ßalho
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            
            # Dados
            ('BACKGROUND', (0, 1), (-1, -2), colors.beige),
            ('ALIGN', (1, 1), (2, -1), 'RIGHT'),
            
            # Total geral
            ('BACKGROUND', (0, -1), (-1, -1), colors.lightgrey),
            ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),
            
            # Borda
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ])
        
        summary_table.setStyle(summary_style)
        elements.append(summary_table)
        
        # Adicionar informa√ß√µes adicionais
        elements.append(Spacer(1, 0.5 * inch))
        elements.append(Paragraph(f"Resumo gerado em: {datetime.now().strftime('%d/%m/%Y %H:%M')}", styles['Normal']))
        
        # Gerar o PDF de resumo
        doc.build(elements)
        pdf_files.append(summary_file)
        
        if display_result:
            st.success(f"‚úÖ Resumo geral gerado: {summary_file}")
        
        # Criar arquivo ZIP com todos os relat√≥rios
        zip_file = os.path.join(output_dir, "relatorios_contabeis.zip")
        with zipfile.ZipFile(zip_file, 'w', zipfile.ZIP_DEFLATED) as zipf:
            # Adicionar todos os PDFs
            for pdf_file in pdf_files:
                zipf.write(pdf_file, os.path.basename(pdf_file))
            
            # Adicionar todos os CSVs
            for csv_file in csv_files:
                zipf.write(csv_file, os.path.basename(csv_file))
        
        # Retornar informa√ß√µes sobre os relat√≥rios e o arquivo ZIP
        return {
            "reports": results,
            "summary_file": summary_file,
            "zip_file": zip_file
        }

    def truncate_lines(self, text, max_chars_per_line=55, max_lines=3):
        """
        Divide o texto em linhas com quebra inteligente por palavras.
        
        Args:
            text: Texto a ser formatado
            max_chars_per_line: M√°ximo de caracteres por linha
            max_lines: M√°ximo de linhas permitidas
            
        Returns:
            String formatada com <br/> para uso em Paragraph
        """
        if not text or pd.isna(text):
            return ""
        
        text_str = str(text).strip()
        if not text_str:
            return ""
        
        # Se o texto √© curto, retornar como est√°
        if len(text_str) <= max_chars_per_line:
            return text_str
        
        # Dividir por palavras
        words = text_str.split()
        lines = []
        current_line = ""
        
        for word in words:
            # Verificar se adicionando a palavra ultrapassaria o limite
            test_line = current_line + " " + word if current_line else word
            
            if len(test_line) <= max_chars_per_line:
                current_line = test_line
            else:
                # Se a linha atual n√£o est√° vazia, adicionar √†s linhas
                if current_line:
                    lines.append(current_line)
                    current_line = word
                else:
                    # Palavra muito longa, for√ßar quebra
                    lines.append(word)
                    current_line = ""
        
        # Adicionar √∫ltima linha se n√£o estiver vazia
        if current_line:
            lines.append(current_line)
        
        # Limitar ao n√∫mero m√°ximo de linhas
        if len(lines) > max_lines:
            lines = lines[:max_lines]
            # Adicionar "..." na √∫ltima linha se necess√°rio
            if lines:
                last_line = lines[-1]
                if len(last_line) + 3 <= max_chars_per_line:
                    lines[-1] = last_line + "..."
                else:
                    # Truncar a √∫ltima linha para dar espa√ßo ao "..."
                    lines[-1] = last_line[:max_chars_per_line-3] + "..."
        
        # Juntar com <br/> para ReportLab
        return "<br/>".join(lines)

    def format_currency(self, value):
        """Formata valor monet√°rio com separador de milhares."""
        if pd.isna(value) or value == 0:
            return "0,00"
        
        # Converter para float se necess√°rio
        if isinstance(value, str):
            value = self.normalize_value(value)
        
        # Formatar com separador de milhares
        formatted = f"{value:,.2f}"
        # Trocar ponto por v√≠rgula e v√≠rgula por ponto (padr√£o brasileiro)
        formatted = formatted.replace(',', 'TEMP').replace('.', ',').replace('TEMP', '.')
        return formatted

    def generate_unified_report(self, df, output_dir=None, display_result=False):
        """
        Gera um relat√≥rio simples: CSV convertido em PDF + p√°gina de resumo.
        """
        import tempfile
        
        # Usar diret√≥rio tempor√°rio se n√£o for especificado
        if output_dir is None:
            output_dir = tempfile.mkdtemp()
        else:
            os.makedirs(output_dir, exist_ok=True)
        
        # Verificar se temos as colunas necess√°rias
        required_columns = ['Tipo', 'DATA', 'valor', 'complemento', 'Debito', 'Credito', 'Historico']
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            raise ValueError(f"Colunas ausentes no DataFrame: {', '.join(missing_columns)}")
        
        # Calcular IRRF usando a nova fun√ß√£o que pega dos dados originais
        irrf_info = self.calculate_irrf_from_original_data(df)
        
        # Usar valores calculados da fun√ß√£o
        valor_bruto_a_pagar = irrf_info['valor_bruto_a_pagar']
        valor_bruto_a_receber = irrf_info['valor_bruto_a_receber']
        valor_liquido_a_pagar = irrf_info['valor_liquido_a_pagar']
        valor_liquido_a_receber = irrf_info['valor_liquido_a_receber']
        saldo_liquido = valor_liquido_a_receber - valor_liquido_a_pagar
        saldo_bruto = valor_bruto_a_receber - valor_bruto_a_pagar
        
        # Contar registros (filtrar apenas registros originais, n√£o lan√ßamentos de IRRF)
        mask_nao_irrf = ~self.is_irrf_record(df)
        df_a_pagar_bruto = df[(df['Tipo'] == 'A pagar') & mask_nao_irrf]
        df_a_receber_bruto = df[(df['Tipo'] == 'A receber') & mask_nao_irrf]
        
        # Configurar estilos para o PDF
        styles = getSampleStyleSheet()
        
        # Criar estilo personalizado para c√©lulas da tabela
        cell_style = styles['Normal'].clone('CellStyle')
        cell_style.fontSize = 7
        cell_style.leading = 9
        cell_style.alignment = 0
        cell_style.wordWrap = 'CJK'
        
        # Nome do arquivo
        pdf_file = os.path.join(output_dir, "relatorio_camara_compensacao.pdf")
        
        # Gerar PDF
        doc = SimpleDocTemplate(pdf_file, pagesize=letter, 
                              leftMargin=1.2*cm, rightMargin=1.2*cm, 
                              topMargin=1.2*cm, bottomMargin=1.2*cm)
        elements = []
        
        # Fun√ß√£o para criar tabela simples do CSV
        def create_csv_table(data_df, section_title):
            section_elements = []
            
            if data_df.empty:
                section_elements.append(Paragraph(f"{section_title} - Nenhum registro encontrado", styles['Heading2']))
                return section_elements, 0, 0
            
            # T√≠tulo da se√ß√£o
            section_elements.append(Paragraph(section_title, styles['Heading2']))
            section_elements.append(Spacer(1, 0.1 * inch))
            
            # Preparar dados para a tabela (formato CSV simples)
            table_data = [['Data', 'Complemento', 'Valor Bruto', 'IRRF', 'Valor L√≠quido', 'D√©bito', 'Cr√©dito', 'Hist√≥rico']]
            
            total_bruto = 0
            total_irrf = 0
            total_liquido = 0
            
            for _, row in data_df.iterrows():
                # Verificar se √© registro de IRRF (lan√ßamento adicional)
                is_irrf_lancamento = self.is_irrf_record(pd.DataFrame([row]))
                
                if is_irrf_lancamento.iloc[0]:
                    # Para lan√ßamentos de IRRF, o valor √© o pr√≥prio IRRF
                    valor_bruto = 0
                    irrf = row['valor']
                    valor_liquido = 0
                else:
                    # Para registros originais
                    valor_bruto = row['valor']
                    # IRRF vem da coluna IRRF original (se dispon√≠vel)
                    irrf = 0
                    if 'IRRF' in row and pd.notnull(row.get('IRRF', 0)):
                        irrf = self.normalize_value(row['IRRF'])
                    valor_liquido = valor_bruto - irrf
                
                # Acumular totais
                total_bruto += valor_bruto
                total_irrf += irrf
                total_liquido += valor_liquido
                
                # Formatar complemento com quebra de linha otimizada
                complemento_texto = str(row['complemento'])
                # Usar fun√ß√£o auxiliar para quebra inteligente de linhas
                complemento_formatado = self.truncate_lines(complemento_texto, max_chars_per_line=55, max_lines=3)
                complemento = Paragraph(complemento_formatado, cell_style)
                
                # Adicionar linha √† tabela
                table_data.append([
                    row['DATA'],
                    complemento,
                    self.format_currency(valor_bruto),
                    self.format_currency(irrf),
                    self.format_currency(valor_liquido),
                    str(row['Debito']),
                    str(row['Credito']),
                    str(row['Historico'])
                ])
            
            # Totais removidos - j√° est√£o no resumo da primeira p√°gina
            
            # Configurar larguras das colunas (ajustadas para formato retrato A4)
            col_widths = [0.6*inch, 3.2*inch, 0.7*inch, 0.5*inch, 0.7*inch, 0.7*inch, 0.7*inch, 0.6*inch]
            
            # Criar tabela com suporte a quebra de linha
            table = Table(table_data, colWidths=col_widths, repeatRows=1, splitByRow=True)
            
            # Estilo da tabela com suporte a quebra de linha
            table_style = TableStyle([
                # Cabe√ßalho
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 8),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 6),
                ('TOPPADDING', (0, 0), (-1, 0), 6),
                
                # Dados
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                ('ALIGN', (0, 1), (0, -1), 'CENTER'),  # Data centralizada
                ('ALIGN', (2, 1), (4, -1), 'RIGHT'),   # Valores √† direita
                ('ALIGN', (5, 1), (-1, -1), 'CENTER'), # C√≥digos centralizados
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),   # Alinhamento vertical superior
                ('FONTSIZE', (0, 1), (-1, -1), 7),
                
                # Bordas simples
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                
                # Padding ajustado para texto com quebra
                ('LEFTPADDING', (0, 0), (-1, -1), 4),
                ('RIGHTPADDING', (0, 0), (-1, -1), 4),
                ('TOPPADDING', (0, 1), (-1, -1), 6),
                ('BOTTOMPADDING', (0, 1), (-1, -1), 6),
                
                # Altern√¢ncia de cores nas linhas para melhor legibilidade
                ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.lightgrey]),
            ])
            
            table.setStyle(table_style)
            section_elements.append(table)
            section_elements.append(Spacer(1, 0.2 * inch))
            
            return section_elements, total_liquido, total_irrf

    # Removido m√©todo truncate_lines conforme solicitado
        
        # P√ÅGINA 1: RESUMO EXECUTIVO
        elements.append(Paragraph("RELAT√ìRIO DA C√ÇMARA DE COMPENSA√á√ÉO", styles['Title']))
        elements.append(Spacer(1, 0.3 * inch))
        
        # Calcular totais para o resumo
        total_a_pagar_liquido = valor_liquido_a_pagar
        total_a_receber_liquido = valor_liquido_a_receber
        total_irrf_a_pagar = irrf_info['irrf_a_pagar']
        total_irrf_a_receber = irrf_info['irrf_a_receber']
        
        # Separar dados por tipo para exibi√ß√£o
        df_a_pagar = df[df['Tipo'] == 'A pagar'].copy()
        df_a_receber = df[df['Tipo'] == 'A receber'].copy()
        
        # Data de refer√™ncia
        date_str = df['DATA'].iloc[0] if not df.empty else ""
        elements.append(Paragraph(f"Data de refer√™ncia: {date_str}", styles['Normal']))
        elements.append(Spacer(1, 0.3 * inch))
        
        # Tabela de resumo executivo atualizada
        resumo_data = [
            ['RESUMO EXECUTIVO', '', '', '', ''],
            ['Categoria', 'Registros', 'Valor Bruto', 'IRRF', 'Valor L√≠quido'],
            ['A Pagar', str(len(df_a_pagar_bruto)), 
             self.format_currency(valor_bruto_a_pagar), 
             self.format_currency(irrf_info['irrf_a_pagar']),
             self.format_currency(valor_liquido_a_pagar)],
            ['A Receber', str(len(df_a_receber_bruto)), 
             self.format_currency(valor_bruto_a_receber), 
             self.format_currency(irrf_info['irrf_a_receber']),
             self.format_currency(valor_liquido_a_receber)],
            ['', '', '', '', ''],
            ['SALDO BRUTO', '', self.format_currency(saldo_bruto), '', ''],
            ['SALDO L√çQUIDO', '', '', '', self.format_currency(saldo_liquido)]
        ]
        
        resumo_table = Table(resumo_data, colWidths=[1.5*inch, 0.8*inch, 1*inch, 0.8*inch, 1*inch])
        
        resumo_style = TableStyle([
            # T√≠tulo
            ('SPAN', (0, 0), (-1, 0)),
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkgrey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            
            # Cabe√ßalho
            ('BACKGROUND', (0, 1), (-1, 1), colors.grey),
            ('TEXTCOLOR', (0, 1), (-1, 1), colors.whitesmoke),
            ('ALIGN', (0, 1), (-1, 1), 'CENTER'),
            ('FONTNAME', (0, 1), (-1, 1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 1), (-1, 1), 9),
            
            # Dados
            ('BACKGROUND', (0, 2), (-1, 4), colors.white),
            ('ALIGN', (1, 2), (-1, -1), 'RIGHT'),
            ('FONTSIZE', (0, 2), (-1, 4), 9),
            
            # Saldo
            ('BACKGROUND', (0, 5), (-1, -1), colors.lightgrey),
            ('FONTNAME', (0, 5), (-1, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 5), (-1, -1), 10),
            ('ALIGN', (4, 5), (4, -1), 'RIGHT'),
            
            # Bordas
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            
            # Padding
            ('LEFTPADDING', (0, 0), (-1, -1), 8),
            ('RIGHTPADDING', (0, 0), (-1, -1), 8),
            ('TOPPADDING', (0, 0), (-1, -1), 6),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ])
        
        resumo_table.setStyle(resumo_style)
        elements.append(resumo_table)
        
        # P√ÅGINA 2: DETALHAMENTO A PAGAR
        from reportlab.platypus import PageBreak
        elements.append(PageBreak())
        
        a_pagar_elements, _, _ = create_csv_table(df[df['Tipo'] == 'A pagar'], "DETALHAMENTO - A PAGAR")
        elements.extend(a_pagar_elements)
        
        # P√ÅGINA 3: DETALHAMENTO A RECEBER
        elements.append(PageBreak())
        
        a_receber_elements, _, _ = create_csv_table(df[df['Tipo'] == 'A receber'], "DETALHAMENTO - A RECEBER")
        elements.extend(a_receber_elements)
        
        # Informa√ß√µes finais
        elements.append(Spacer(1, 0.3 * inch))
        elements.append(Paragraph(f"Relat√≥rio gerado em: {datetime.now().strftime('%d/%m/%Y %H:%M')}", styles['Normal']))
        
        # Gerar o PDF
        doc.build(elements)
        
        if display_result:
            st.success(f"‚úÖ Relat√≥rio unificado gerado com sucesso!")
            st.info(f"üìä A Pagar: {len(df_a_pagar_bruto)} registros - {self.format_currency(valor_liquido_a_pagar)}")
            st.info(f"üìà A Receber: {len(df_a_receber_bruto)} registros - {self.format_currency(valor_liquido_a_receber)}")
            st.info(f"üßæ IRRF Total: {self.format_currency(irrf_info['total_irrf'])} (A Pagar: {self.format_currency(irrf_info['irrf_a_pagar'])}, A Receber: {self.format_currency(irrf_info['irrf_a_receber'])})")
            st.info(f"üí∞ Saldo Bruto: {self.format_currency(saldo_bruto)}")
            st.info(f"üí∞ Saldo L√≠quido: {self.format_currency(saldo_liquido)}")
        
        return {
            "pdf_file": pdf_file,
            "total_a_pagar": valor_liquido_a_pagar,
            "total_a_receber": valor_liquido_a_receber,
            "count_a_pagar": len(df_a_pagar_bruto),
            "count_a_receber": len(df_a_receber_bruto),
            "saldo": saldo_liquido,
            "irrf_info": irrf_info,
            "valor_bruto_a_pagar": valor_bruto_a_pagar,
            "valor_bruto_a_receber": valor_bruto_a_receber,
            "saldo_bruto": saldo_bruto
        }

    def generate_irrf_report(self, df, output_dir=None, display_result=False):
        """
        Gera relat√≥rio espec√≠fico de IRRF (Imposto de Renda Retido na Fonte).
        """
        import tempfile
        
        # Usar diret√≥rio tempor√°rio se n√£o for especificado
        if output_dir is None:
            output_dir = tempfile.mkdtemp()
        else:
            os.makedirs(output_dir, exist_ok=True)
        
        # Calcular IRRF usando a nova fun√ß√£o de dados originais
        irrf_info = self.calculate_irrf_from_original_data(df)
        
        if irrf_info['total_irrf'] == 0:
            if display_result:
                st.warning("Nenhum registro com IRRF encontrado nos dados originais.")
            return None
        
        # Filtrar apenas registros que t√™m IRRF > 0 nos dados originais
        mask_nao_irrf = ~self.is_irrf_record(df)
        df_original = df[mask_nao_irrf].copy()
        
        if 'IRRF' in df_original.columns:
            df_original['IRRF_normalizado'] = df_original['IRRF'].apply(self.normalize_value)
            df_irrf = df_original[df_original['IRRF_normalizado'] > 0].copy()
        else:
            df_irrf = pd.DataFrame()
        
        # Configurar estilos para o PDF
        styles = getSampleStyleSheet()
        
        # Criar estilo personalizado para c√©lulas da tabela
        cell_style = styles['Normal'].clone('CellStyle')
        cell_style.fontSize = 8
        cell_style.leading = 10
        cell_style.alignment = 0
        cell_style.wordWrap = 'CJK'
        
        # Nome do arquivo
        pdf_file = os.path.join(output_dir, "relatorio_irrf.pdf")
        
        # Gerar PDF
        doc = SimpleDocTemplate(pdf_file, pagesize=letter, 
                              leftMargin=1.2*cm, rightMargin=1.2*cm, 
                              topMargin=1.2*cm, bottomMargin=1.2*cm)
        elements = []
        
        # T√≠tulo principal
        elements.append(Paragraph("RELAT√ìRIO DE IRRF - IMPOSTO DE RENDA RETIDO NA FONTE", styles['Title']))
        elements.append(Spacer(1, 0.3 * inch))
        
        # Data de refer√™ncia
        date_str = df_irrf['DATA'].iloc[0] if not df_irrf.empty else ""
        elements.append(Paragraph(f"Data de refer√™ncia: {date_str}", styles['Normal']))
        elements.append(Spacer(1, 0.2 * inch))
        
        # Preparar dados para a tabela
        table_data = [['Tipo', 'Entidade', 'Valor IRRF', 'Observa√ß√£o']]
        
        for _, row in df_irrf.iterrows():
            # Valor do IRRF vem da coluna IRRF_normalizado
            valor_irrf = row.get('IRRF_normalizado', 0)
            
            # Formatar entidade (nome mais curto)
            entidade = str(row.get('NomeSingular', 'N/A'))
            if len(entidade) > 30:
                entidade = entidade[:27] + '...'
            
            table_data.append([
                row['Tipo'],
                Paragraph(entidade, cell_style),
                self.format_currency(valor_irrf),
                "IRRF dos dados originais"
            ])
        
        # Adicionar linha de total
        table_data.append([
            '',
            Paragraph('<b>TOTAL</b>', cell_style),
            f'<b>{self.format_currency(irrf_info["total_irrf"])}</b>',
            ''
        ])
        
        # Configurar larguras das colunas (ajustadas para formato retrato A4)
        col_widths = [0.8*inch, 1.8*inch, 1*inch, 1.8*inch]
        
        # Criar tabela
        table = Table(table_data, colWidths=col_widths, repeatRows=1, splitByRow=True)
        
        # Estilo da tabela
        table_style = TableStyle([
            # Cabe√ßalho
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 8),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 6),
            ('TOPPADDING', (0, 0), (-1, 0), 6),
            
            # Dados
            ('BACKGROUND', (0, 1), (-1, -2), colors.white),
            ('ALIGN', (2, 1), (-1, -1), 'RIGHT'),   # Valores √† direita
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('FONTSIZE', (0, 1), (-1, -2), 7),
            
            # Linha de total
            ('BACKGROUND', (0, -1), (-1, -1), colors.lightgrey),
            ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, -1), (-1, -1), 8),
            ('ALIGN', (2, -1), (-1, -1), 'RIGHT'),
            
            # Bordas
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            
            # Padding
            ('LEFTPADDING', (0, 0), (-1, -1), 3),
            ('RIGHTPADDING', (0, 0), (-1, -1), 3),
            ('TOPPADDING', (0, 1), (-1, -1), 4),
            ('BOTTOMPADDING', (0, 1), (-1, -1), 4),
            
            # Altern√¢ncia de cores nas linhas
            ('ROWBACKGROUNDS', (0, 1), (-1, -2), [colors.white, colors.lightgrey]),
        ])
        
        table.setStyle(table_style)
        elements.append(table)
        
        # Resumo estat√≠stico
        elements.append(Spacer(1, 0.3 * inch))
        elements.append(Paragraph("RESUMO ESTAT√çSTICO", styles['Heading2']))
        elements.append(Spacer(1, 0.1 * inch))
        
        resumo_data = [
            ['Categoria', 'Registros', 'Total IRRF'],
            ['A Pagar', str(len(df_irrf[df_irrf['Tipo'] == 'A pagar'])), self.format_currency(irrf_info['irrf_a_pagar'])],
            ['A Receber', str(len(df_irrf[df_irrf['Tipo'] == 'A receber'])), self.format_currency(irrf_info['irrf_a_receber'])],
            ['TOTAL GERAL', str(irrf_info['registros_com_irrf']), self.format_currency(irrf_info['total_irrf'])]
        ]
        
        resumo_table = Table(resumo_data, colWidths=[1.5*inch, 1.2*inch, 1.3*inch])
        resumo_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BACKGROUND', (0, 1), (-1, -2), colors.white),
            ('BACKGROUND', (0, -1), (-1, -1), colors.lightgrey),
            ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),
            ('ALIGN', (1, 1), (-1, -1), 'RIGHT'),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('LEFTPADDING', (0, 0), (-1, -1), 6),
            ('RIGHTPADDING', (0, 0), (-1, -1), 6),
            ('TOPPADDING', (0, 0), (-1, -1), 5),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
        ]))
        
        elements.append(resumo_table)
        
        # Informa√ß√µes finais
        elements.append(Spacer(1, 0.3 * inch))
        elements.append(Paragraph("OBSERVA√á√ïES:", styles['Heading3']))
        elements.append(Paragraph("‚Ä¢ Registros de IRRF identificados atrav√©s da palavra 'IRRF' no complemento", styles['Normal']))
        elements.append(Paragraph("‚Ä¢ Valores apresentados s√£o os valores dos registros cont√°beis de IRRF", styles['Normal']))
        elements.append(Paragraph("‚Ä¢ IRRF A Pagar: valores deduzidos dos pagamentos", styles['Normal']))
        elements.append(Paragraph("‚Ä¢ IRRF A Receber: valores deduzidos dos recebimentos", styles['Normal']))
        elements.append(Spacer(1, 0.2 * inch))
        elements.append(Paragraph(f"Relat√≥rio gerado em: {datetime.now().strftime('%d/%m/%Y %H:%M')}", styles['Normal']))
        
        # Gerar o PDF
        doc.build(elements)
        
        if display_result:
            st.success(f"‚úÖ Relat√≥rio de IRRF gerado com sucesso!")
            st.info(f"üìä Total de registros com IRRF: {irrf_info['registros_com_irrf']}")
            st.info(f"üí∞ Total IRRF: {self.format_currency(irrf_info['total_irrf'])}")
            st.info(f"üî∏ IRRF A Pagar: {self.format_currency(irrf_info['irrf_a_pagar'])}")
            st.info(f"üîπ IRRF A Receber: {self.format_currency(irrf_info['irrf_a_receber'])}")
        
        return {
            "pdf_file": pdf_file,
            "total_irrf": irrf_info['total_irrf'],
            "total_registros": irrf_info['registros_com_irrf'],
            "irrf_a_pagar": irrf_info['irrf_a_pagar'],
            "irrf_a_receber": irrf_info['irrf_a_receber']
        }

    def export_to_csv(self, df, filename):
        """Exporta o DataFrame para um arquivo CSV."""
        csv_content = self.df_to_csv_string(df)
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(csv_content)
        return filename

    def safe_numeric_sum(self, series):
        """Converte s√©rie para num√©rica e retorna soma, tratando valores n√£o-num√©ricos."""
        if series.empty:
            return 0.0
        
        # Converter para num√©rico, for√ßando erros para NaN
        numeric_series = pd.to_numeric(series, errors='coerce')
        
        # Substituir NaN por 0 e retornar soma
        return numeric_series.fillna(0).sum()
    
    def calculate_irrf_by_complemento(self, df):
        """Calcula IRRF baseado nos registros que cont√™m 'IRRF' no complemento."""
        # Filtrar registros que t√™m IRRF no complemento usando a fun√ß√£o helper
        mask_irrf = self.is_irrf_record(df)
        df_irrf = df[mask_irrf].copy()
        
        if df_irrf.empty:
            return {
                'total_irrf': 0.0,
                'irrf_a_pagar': 0.0,
                'irrf_a_receber': 0.0,
                'registros_irrf': 0,
                'df_irrf': pd.DataFrame()
            }
        
        # Separar por tipo
        irrf_a_pagar = self.safe_numeric_sum(df_irrf[df_irrf['Tipo'] == 'A pagar']['valor'])
        irrf_a_receber = self.safe_numeric_sum(df_irrf[df_irrf['Tipo'] == 'A receber']['valor'])
        
        return {
            'total_irrf': irrf_a_pagar + irrf_a_receber,
            'irrf_a_pagar': irrf_a_pagar,
            'irrf_a_receber': irrf_a_receber,
            'registros_irrf': len(df_irrf),
            'df_irrf': df_irrf
        }
    
    def calculate_irrf_from_original_data(self, df):
        """
        Calcula IRRF baseado nos dados originais (coluna IRRF dos dados originais).
        Esta fun√ß√£o deve ser usada quando temos acesso aos dados originais com a coluna IRRF.
        """
        # Filtrar apenas registros que N√ÉO s√£o lan√ßamentos de IRRF (registros originais)
        mask_nao_irrf = ~self.is_irrf_record(df)
        df_original = df[mask_nao_irrf].copy()
        
        if df_original.empty:
            return {
                'total_irrf': 0.0,
                'irrf_a_pagar': 0.0,
                'irrf_a_receber': 0.0,
                'registros_com_irrf': 0,
                'valor_bruto_a_pagar': 0.0,
                'valor_bruto_a_receber': 0.0,
                'valor_liquido_a_pagar': 0.0,
                'valor_liquido_a_receber': 0.0
            }
        
        # Calcular valores brutos (dos registros originais)
        df_a_pagar = df_original[df_original['Tipo'] == 'A pagar']
        df_a_receber = df_original[df_original['Tipo'] == 'A receber']
        
        valor_bruto_a_pagar = self.safe_numeric_sum(df_a_pagar['valor'])
        valor_bruto_a_receber = self.safe_numeric_sum(df_a_receber['valor'])
        
        # Calcular IRRF baseado na coluna IRRF original (se dispon√≠vel)
        irrf_a_pagar = 0.0
        irrf_a_receber = 0.0
        registros_com_irrf = 0
        
        if 'IRRF' in df_original.columns:
            # Normalizar valores da coluna IRRF
            df_original['IRRF_normalizado'] = df_original['IRRF'].apply(self.normalize_value)
            
            # Filtrar registros com IRRF > 0
            df_com_irrf = df_original[df_original['IRRF_normalizado'] > 0]
            registros_com_irrf = len(df_com_irrf)
            
            # Somar IRRF por tipo
            df_a_pagar_irrf = df_com_irrf[df_com_irrf['Tipo'] == 'A pagar']
            df_a_receber_irrf = df_com_irrf[df_com_irrf['Tipo'] == 'A receber']
            
            irrf_a_pagar = self.safe_numeric_sum(df_a_pagar_irrf['IRRF_normalizado'])
            irrf_a_receber = self.safe_numeric_sum(df_a_receber_irrf['IRRF_normalizado'])
        
        # Calcular valores l√≠quidos
        valor_liquido_a_pagar = valor_bruto_a_pagar - irrf_a_pagar
        valor_liquido_a_receber = valor_bruto_a_receber - irrf_a_receber
        
        return {
            'total_irrf': irrf_a_pagar + irrf_a_receber,
            'irrf_a_pagar': irrf_a_pagar,
            'irrf_a_receber': irrf_a_receber,
            'registros_com_irrf': registros_com_irrf,
            'valor_bruto_a_pagar': valor_bruto_a_pagar,
            'valor_bruto_a_receber': valor_bruto_a_receber,
            'valor_liquido_a_pagar': valor_liquido_a_pagar,
            'valor_liquido_a_receber': valor_liquido_a_receber
        }

    def is_irrf_record(self, df):
        """Identifica registros de IRRF baseado no complemento."""
        return (
            df['complemento'].str.contains(r'\|\s*IRRF\s*$', case=False, na=False, regex=True) |
            df['complemento'].str.endswith('IRRF', na=False) |
            df['complemento'].str.contains(r'IRRF\s*$', case=False, na=False, regex=True)
        )

def main():
    st.title("Processador de Arquivos CSV da C√¢mara de Compensa√ß√£o")
    
    # Adiciona CSS personalizado
    st.markdown("""
        <style>
            /* Configura√ß√µes existentes */
            .download-button {
                display: inline-block;
                padding: 0.5em 1em;
                background-color: #4CAF50;
                color: white;
                text-align: center;
                text-decoration: none;
                font-size: 16px;
                border-radius: 4px;
                transition: background-color 0.3s;
                margin: 10px 0;
            }
            .download-button:hover {
                background-color: #45a049;
            }
            .file-header {
                margin-top: 20px;
                padding: 10px;
                background-color: #f0f2f6;
                border-radius: 5px;
            }
            .stAlert {
                margin-top: 10px;
            }
            .report-box {
                background-color: #f9f9f9;
                border: 1px solid #ddd;
                border-radius: 5px;
                padding: 15px;
                margin-bottom: 10px;
            }
            .report-header {
                font-weight: bold;
                margin-bottom: 10px;
                color: #2C3E50;
            }
            .report-metrics {
                display: flex;
                gap: 20px;
            }
            .metric {
                background-color: #e8f4f8;
                padding: 10px;
                border-radius: 5px;
                text-align: center;
            }
            .metric-value {
                font-size: 1.2em;
                font-weight: bold;
            }
            
            /* Formata√ß√£o da tabela de relat√≥rios - AJUSTADO */
            table {
                width: 100%;
                table-layout: fixed;
                border-collapse: collapse;
                font-size: 10pt;
            }
            td, th {
                font-family: Arial, sans-serif;
                padding: 3px;
                border: 1px solid #ddd;
                overflow: hidden;
            }
            td {
                word-wrap: break-word;
                white-space: normal;
                text-overflow: ellipsis;
                vertical-align: middle;
                max-width: 0; /* For√ßa texto a quebrar */
            }
            th {
                background-color: #f2f2f2;
                font-weight: bold;
                text-align: center;
            }
            
            /* Classes espec√≠ficas para colunas - AJUSTADO */
            .col-data { width: 8%; }
            .col-complemento { width: 20%; } /* Reduzido para dar mais espa√ßo a outras colunas */
            .col-valor { width: 8%; }
            .col-debito { width: 28%; } /* Aumentado para acomodar textos longos */
            .col-credito { width: 28%; } /* Aumentado para acomodar textos longos */
            .col-historico { width: 8%; }
        </style>
        """, unsafe_allow_html=True)
    
    st.write("""
    Este aplicativo processa arquivos CSV da c√¢mara de compensa√ß√£o de singulares do Neodonto.
    Arraste e solte os arquivos CSV para process√°-los conforme as regras estabelecidas.
    """)
    
    processor = NeodontoCsvProcessor()
    
    # Criando abas principais
    tab1, tab2, tab3 = st.tabs(["Processamento de Arquivos", "Relat√≥rios Cont√°beis", "Edi√ß√£o de Dados"])
    
    with tab1:
        # Op√ß√£o para configurar manualmente a data
        custom_date = st.checkbox("Definir data manualmente")
        if custom_date:
            selected_date = st.date_input(
                "Selecione a data a ser usada (√∫ltimo dia do m√™s de refer√™ncia)",
                value=processor.last_day_of_previous_month
            )
            processor.last_day_of_previous_month = selected_date
        
        # Op√ß√µes avan√ßadas em um expansor
        with st.expander("Op√ß√µes avan√ßadas"):
            st.write("Configura√ß√µes de processamento:")
            
            # Op√ß√£o para mostrar mais linhas na pr√©via
            preview_rows = st.slider("N√∫mero de linhas na pr√©via", min_value=3, max_value=20, value=5)
            
            # Op√ß√£o para processar todos os arquivos em lote
            batch_process = st.checkbox("Processar todos os arquivos em lote", value=False)
            
            # Op√ß√£o para baixar todos os arquivos processados em um ZIP
            download_zip = st.checkbox("Baixar todos os arquivos em um √∫nico ZIP", value=False)
            
            # Nova op√ß√£o para mostrar pr√©via dos arquivos
            show_preview = st.checkbox("Mostrar pr√©via dos arquivos antes do processamento", value=False)
        
        # Upload de arquivos CSV
        uploaded_files = st.file_uploader(
            "Arraste e solte os arquivos CSV aqui", 
            type=["csv"], 
            accept_multiple_files=True
        )
        
        if uploaded_files:
            # Barra de progresso
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # Processamento dos arquivos
            processed_dfs = {}
            original_dfs = {}
            total_files = len(uploaded_files)
            
            # Se processar em lote, mostrar apenas barra de progresso
            if batch_process:
                for i, uploaded_file in enumerate(uploaded_files):
                    status_text.text(f"Processando arquivo {i+1} de {total_files}: {uploaded_file.name}")
                    progress_bar.progress((i) / total_files)
                    
                    # Processamento do arquivo
                    processed_df, original_df = processor.process_csv_file(uploaded_file)
                    if processed_df is not None:
                        processed_dfs[uploaded_file.name] = processed_df
                        original_dfs[uploaded_file.name] = original_df
                    
                    progress_bar.progress((i+1) / total_files)
                
                # Resumo do processamento em lote
                st.write("## Resumo do processamento")
                st.write(f"Total de arquivos: {total_files}")
                st.write(f"Arquivos processados com sucesso: {len(processed_dfs)}")
                st.write(f"Arquivos com erro: {total_files - len(processed_dfs)}")
                
                # Download individual
                st.write("## Download dos arquivos processados")
                for filename, df in processed_dfs.items():
                    output_filename = f"contabil_{filename}"
                    download_link = processor.create_download_link(df, output_filename)
                    st.markdown(download_link, unsafe_allow_html=True)
                
                # Se op√ß√£o de ZIP selecionada, gerar download ZIP
                if download_zip and processed_dfs:
                    try:
                        import zipfile
                        from io import BytesIO
                        
                        # Criar arquivo ZIP em mem√≥ria
                        zip_buffer = BytesIO()
                        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                            for filename, df in processed_dfs.items():
                                # Converter DataFrame para CSV em string
                                csv_content = processor.df_to_csv_string(df)
                                # Adicionar ao ZIP
                                zip_file.writestr(f"contabil_{filename}", csv_content.encode('utf-8'))
                        
                        # Criar link de download para o ZIP
                        zip_buffer.seek(0)
                        b64 = base64.b64encode(zip_buffer.read()).decode()
                        href = f'<a href="data:application/zip;base64,{b64}" download="contabil_todos_arquivos.zip" class="download-button">Baixar todos os arquivos em ZIP</a>'
                        st.markdown(href, unsafe_allow_html=True)
                    except Exception as e:
                        st.error(f"Erro ao criar arquivo ZIP: {str(e)}")
            
            # Se n√£o for processamento em lote, mostrar detalhes de cada arquivo
            else:
                st.write("## Arquivos processados")
                
                for i, uploaded_file in enumerate(uploaded_files):
                    progress_bar.progress((i) / total_files)
                    status_text.text(f"Processando arquivo {i+1} de {total_files}")
                    
                    st.markdown(f"<div class='file-header'><h3>Arquivo: {uploaded_file.name}</h3></div>", unsafe_allow_html=True)
                    
                    # Mostrar pr√©via se solicitado
                    if show_preview:
                        try:
                            # Ler arquivo para pr√©via
                            uploaded_file.seek(0)
                            df_preview = pd.read_csv(uploaded_file, sep=';', encoding='utf-8', nrows=10)
                            self.show_file_preview(df_preview, uploaded_file.name)
                            
                            # Perguntar se deve continuar
                            if not st.button(f"Processar {uploaded_file.name}", key=f"process_{i}"):
                                st.info("Clique no bot√£o acima para processar este arquivo.")
                                continue
                        except Exception as e:
                            st.warning(f"N√£o foi poss√≠vel mostrar pr√©via: {str(e)}")
                    
                    # Processamento do arquivo
                    processed_df, original_df = processor.process_csv_file(uploaded_file)
                    
                    if processed_df is not None:
                        # Salvar tamb√©m o DataFrame original
                        processed_dfs[uploaded_file.name] = processed_df
                        original_dfs[uploaded_file.name] = original_df
                        
                        # Exibe uma pr√©via dos dados processados
                        st.write("Pr√©via dos dados processados:")
                        
                        # Op√ß√£o para escolher quantas linhas mostrar
                        col1, col2 = st.columns([2, 1])
                        with col1:
                            st.write(f"**Total de {len(processed_df)} registros processados**")
                        with col2:
                            show_all = st.checkbox("Mostrar todos os registros", key=f"show_all_{i}")
                        
                        if show_all:
                            # Mostrar todos os registros
                            st.dataframe(processed_df, use_container_width=True, height=400)
                        else:
                            # Mostrar apenas as primeiras linhas com op√ß√£o de escolher quantas
                            num_rows = st.slider(
                                "N√∫mero de linhas para mostrar:", 
                                min_value=5, 
                                max_value=min(50, len(processed_df)), 
                                value=min(preview_rows, len(processed_df)),
                                key=f"num_rows_{i}"
                            )
                            st.dataframe(processed_df.head(num_rows), use_container_width=True)
                        
                        # Estat√≠sticas b√°sicas
                        st.write("Resumo do processamento:")
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("Total de registros", len(processed_df))
                        with col2:
                            # Conta registros de IRRF (adicionais)
                            original_rows = len(processed_df) - sum(1 for _, row in processed_df.iterrows() 
                                                                 if row['Historico'] in [22, 2341])
                            st.metric("Registros originais", original_rows)
                        with col3:
                            irrf_rows = sum(1 for _, row in processed_df.iterrows() 
                                          if row['Historico'] in [22, 2341])
                            st.metric("Registros IRRF adicionados", irrf_rows)
                        
                        # Cria nome do arquivo de sa√≠da
                        output_filename = f"contabil_{uploaded_file.name}"
                        
                        # Cria link de download
                        download_link = processor.create_download_link(processed_df, output_filename)
                        st.markdown(download_link, unsafe_allow_html=True)
                    else:
                        st.error(f"N√£o foi poss√≠vel processar o arquivo {uploaded_file.name}")
                    
                    # Adiciona separador visual
                    st.markdown("---")
                    
                    # Atualiza a barra de progresso
                    progress_bar.progress((i+1) / total_files)
                
                # Se op√ß√£o de ZIP selecionada, gerar download ZIP
                if download_zip and processed_dfs:
                    try:
                        import zipfile
                        from io import BytesIO
                        
                        # Criar arquivo ZIP em mem√≥ria
                        zip_buffer = BytesIO()
                        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                            for filename, df in processed_dfs.items():
                                # Converter DataFrame para CSV em string
                                csv_content = processor.df_to_csv_string(df)
                                # Adicionar ao ZIP
                                zip_file.writestr(f"contabil_{filename}", csv_content.encode('utf-8'))
                        
                        # Criar link de download para o ZIP
                        zip_buffer.seek(0)
                        b64 = base64.b64encode(zip_buffer.read()).decode()
                        st.markdown("<h3>Download em lote</h3>", unsafe_allow_html=True)
                        href = f'<a href="data:application/zip;base64,{b64}" download="contabil_todos_arquivos.zip" class="download-button">Baixar todos os arquivos em ZIP</a>'
                        st.markdown(href, unsafe_allow_html=True)
                    except Exception as e:
                        st.error(f"Erro ao criar arquivo ZIP: {str(e)}")
                
                # Finaliza a barra de progresso
                progress_bar.progress(1.0)
                status_text.text("Processamento conclu√≠do!")
            
            # Armazenar os DataFrames processados na sess√£o para uso na aba de relat√≥rios
            st.session_state.processed_dfs = processed_dfs
            st.session_state.original_dfs = original_dfs
            st.session_state.original_dfs = original_dfs
    
    with tab2:
        st.header("Relat√≥rios Cont√°beis")
        
        if 'processed_dfs' not in st.session_state or not st.session_state.processed_dfs:
            st.info("Processe arquivos na aba 'Processamento de Arquivos' para gerar relat√≥rios cont√°beis.")
        else:
            st.write("Selecione os arquivos para gerar relat√≥rios cont√°beis:")
            
            # Mostrar lista de arquivos processados para sele√ß√£o
            processed_files = list(st.session_state.processed_dfs.keys())
            selected_files = st.multiselect("Arquivos dispon√≠veis", processed_files, default=processed_files)
            
            if selected_files:
                # Op√ß√£o para processar todos os relat√≥rios ou apenas alguns espec√≠ficos
                report_options = st.radio(
                    "Escolha os relat√≥rios a serem gerados:",
                    ["Relat√≥rio Unificado da C√¢mara de Compensa√ß√£o", "Relat√≥rio de IRRF", "Todos os relat√≥rios solicitados pelo contador", "Relat√≥rios espec√≠ficos"]
                )
                
                if report_options == "Relat√≥rios espec√≠ficos":
                    # Lista de relat√≥rios dispon√≠veis
                    report_types = [
                        {"name": "taxas_manutencao", "title": "Taxas de Manuten√ß√£o (3) - Para todas"},
                        {"name": "taxas_marketing", "title": "Taxas de Marketing (4) - Para todas"},
                        {"name": "multas_juros", "title": "Multas e Juros (5) - Para todas"},
                        {"name": "outras", "title": "Outras (6) - Para todas"},
                        {"name": "pre_pagamento_operadoras", "title": "Pr√©-pagamento (1) - Operadoras"},
                        {"name": "custo_operacional_operadoras", "title": "Custo Operacional (2) - Operadoras"},
                        {"name": "pre_pagamento_prestadoras", "title": "Pr√©-pagamento (1) - Prestadoras"},
                        {"name": "custo_operacional_prestadoras", "title": "Custo Operacional (2) - Prestadoras"}
                    ]
                    
                    selected_reports = st.multiselect(
                        "Selecione os relat√≥rios espec√≠ficos a serem gerados:",
                        options=[report["title"] for report in report_types],
                        default=[report["title"] for report in report_types]
                    )
                    
                    # Mapear t√≠tulos selecionados para nomes de relat√≥rios
                    report_name_to_title = {report["name"]: report["title"] for report in report_types}
                    title_to_report_name = {report["title"]: report["name"] for report in report_types}
                    
                    # Filtrar reports_config com base nos relat√≥rios selecionados
                    selected_report_names = [title_to_report_name[title] for title in selected_reports]
                else:
                    # Todos os relat√≥rios selecionados
                    selected_report_names = None
                
                if st.button("Gerar Relat√≥rios Cont√°beis"):
                    # Criar diret√≥rio tempor√°rio para os relat√≥rios
                    import tempfile
                    output_dir = tempfile.mkdtemp()
                    
                    # Op√ß√£o de debug (movida para c√° para evitar problemas de estado)
                    debug_mode = st.checkbox("Modo debug (mostrar informa√ß√µes detalhadas)", value=False, key="debug_mode_reports")
                    
                    # VERIFICAR SE H√Å DADOS EDITADOS
                    dados_editados = False
                    arquivos_editados = []
                    
                    # Verificar se h√° vers√µes editadas dos arquivos selecionados
                    for filename in selected_files:
                        edited_key = f"{filename}_edited"
                        if edited_key in st.session_state:
                            arquivos_editados.append(filename)
                            dados_editados = True
                    
                    # Decidir quais dados usar para o relat√≥rio
                    if dados_editados:
                        st.info(f"‚úèÔ∏è **Usando dados editados** para {len(arquivos_editados)} arquivo(s): {', '.join(arquivos_editados)}")
                        
                        # Consolidar DataFrames - usar vers√£o editada quando dispon√≠vel
                        dfs_to_process = []
                        for filename in selected_files:
                            edited_key = f"{filename}_edited"
                            if edited_key in st.session_state:
                                # Usar vers√£o editada reprocessada
                                reprocessed_key = f"{filename}_reprocessed"
                                if reprocessed_key in st.session_state:
                                    dfs_to_process.append(st.session_state[reprocessed_key])
                                else:
                                    # Fallback para vers√£o editada
                                    dfs_to_process.append(st.session_state[edited_key])
                            else:
                                # Usar vers√£o original
                                dfs_to_process.append(st.session_state.processed_dfs[filename])
                        
                        consolidated_df = pd.concat(dfs_to_process, ignore_index=True)
                    else:
                        st.info("üìÑ **Usando dados originais** (nenhuma edi√ß√£o detectada)")
                        # Consolidar DataFrames originais
                        dfs_to_process = [st.session_state.processed_dfs[filename] for filename in selected_files]
                        consolidated_df = pd.concat(dfs_to_process, ignore_index=True)
                    
                    st.write(f"Gerando relat√≥rios cont√°beis a partir de {len(consolidated_df)} registros...")
                    
                    # Mostrar barra de progresso
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    status_text.text("Processando relat√≥rios cont√°beis...")
                    
                    # CRIAR RESUMO EXECUTIVO COM VALORES BRUTOS E L√çQUIDOS
                    st.subheader("üí∞ Resumo Executivo")
                    
                    # Calcular valores usando a nova fun√ß√£o
                    irrf_info = processor.calculate_irrf_from_original_data(consolidated_df)
                    
                    # Usar valores calculados da fun√ß√£o
                    valor_bruto_a_pagar = irrf_info['valor_bruto_a_pagar']
                    valor_bruto_a_receber = irrf_info['valor_bruto_a_receber']
                    valor_liquido_a_pagar = irrf_info['valor_liquido_a_pagar']
                    valor_liquido_a_receber = irrf_info['valor_liquido_a_receber']
                    saldo_liquido = valor_liquido_a_receber - valor_liquido_a_pagar
                    saldo_bruto = valor_bruto_a_receber - valor_bruto_a_pagar
                    
                    # Contar registros (filtrar apenas registros originais, n√£o lan√ßamentos de IRRF)
                    mask_nao_irrf = ~processor.is_irrf_record(consolidated_df)
                    df_a_pagar_bruto = consolidated_df[(consolidated_df['Tipo'] == 'A pagar') & mask_nao_irrf]
                    df_a_receber_bruto = consolidated_df[(consolidated_df['Tipo'] == 'A receber') & mask_nao_irrf]
                    
                    # Exibir resumo em colunas (sem IRRF - tem se√ß√£o dedicada)
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric("üí∏ Valor A Pagar (Bruto)", processor.format_currency(valor_bruto_a_pagar))
                        st.metric("üí∏ Valor A Pagar (L√≠quido)", processor.format_currency(valor_liquido_a_pagar))
                        st.metric("üìä Registros A Pagar", len(df_a_pagar_bruto))
                    
                    with col2:
                        st.metric("üí∞ Valor A Receber (Bruto)", processor.format_currency(valor_bruto_a_receber))
                        st.metric("üí∞ Valor A Receber (L√≠quido)", processor.format_currency(valor_liquido_a_receber))
                        st.metric("üìä Registros A Receber", len(df_a_receber_bruto))
                    
                    with col3:
                        saldo_color = "normal" if saldo_bruto >= 0 else "inverse"
                        st.metric("üè¶ Saldo Final (Bruto)", processor.format_currency(saldo_bruto), delta_color=saldo_color)
                        saldo_liquido_color = "normal" if saldo_liquido >= 0 else "inverse"
                        st.metric("üè¶ Saldo Final (L√≠quido)", processor.format_currency(saldo_liquido), delta_color=saldo_liquido_color)
                        st.metric("üìä Total de Registros", len(df_a_pagar_bruto) + len(df_a_receber_bruto))
                    
                    # Alerta se h√° diferen√ßa significativa entre bruto e l√≠quido
                    if abs(saldo_bruto - saldo_liquido) > 0.01:
                        st.warning(f"‚ö†Ô∏è **Aten√ß√£o**: Diferen√ßa de {processor.format_currency(abs(saldo_bruto - saldo_liquido))} entre saldo bruto e l√≠quido devido ao IRRF")
                    
                    # SE√á√ÉO DE DETALHAMENTO DO IRRF
                    if irrf_info['total_irrf'] > 0:
                        st.subheader("üßæ Detalhamento do IRRF")
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.write("**üìä Registros com IRRF nos dados originais:**")
                            st.write(f"‚Ä¢ **Registros com IRRF**: {irrf_info['registros_com_irrf']}")
                            st.write(f"‚Ä¢ **IRRF A Pagar**: {processor.format_currency(irrf_info['irrf_a_pagar'])}")
                            st.write(f"‚Ä¢ **IRRF A Receber**: {processor.format_currency(irrf_info['irrf_a_receber'])}")
                            st.write(f"‚Ä¢ **Total IRRF**: {processor.format_currency(irrf_info['total_irrf'])}")
                        
                        with col2:
                            st.write("**üí° C√°lculo do Valor L√≠quido:**")
                            st.write("*Valores l√≠quidos = Valores brutos - IRRF correspondente*")
                            st.write("")
                            st.write(f"**A Pagar**: {processor.format_currency(valor_bruto_a_pagar)} - {processor.format_currency(irrf_info['irrf_a_pagar'])} = {processor.format_currency(valor_liquido_a_pagar)}")
                            st.write(f"**A Receber**: {processor.format_currency(valor_bruto_a_receber)} - {processor.format_currency(irrf_info['irrf_a_receber'])} = {processor.format_currency(valor_liquido_a_receber)}")
                            st.write("")
                            st.write(f"**Saldo L√≠quido**: {processor.format_currency(saldo_liquido)}")
                    else:
                        st.info("‚ÑπÔ∏è Nenhum registro com IRRF encontrado nos dados originais.")
                    
                    # Verifica√ß√£o de seguran√ßa para output_dir
                    if 'output_dir' not in locals() or output_dir is None:
                        import tempfile
                        output_dir = tempfile.mkdtemp()
                        st.info("üîß Diret√≥rio tempor√°rio criado para relat√≥rios")
                    
                    try:
                        if report_options == "Relat√≥rio Unificado da C√¢mara de Compensa√ß√£o":
                            # Gerar relat√≥rio unificado
                            unified_results = processor.generate_unified_report(consolidated_df, output_dir, display_result=True)
                            
                            # Criar link de download para o relat√≥rio unificado
                            if "pdf_file" in unified_results and os.path.exists(unified_results["pdf_file"]):
                                with open(unified_results["pdf_file"], "rb") as f:
                                    pdf_data = f.read()
                                    b64 = base64.b64encode(pdf_data).decode()
                                    href = f'<a href="data:application/pdf;base64,{b64}" download="relatorio_camara_compensacao.pdf" class="download-button">Baixar Relat√≥rio Unificado (PDF)</a>'
                                    st.markdown(href, unsafe_allow_html=True)
                        
                        elif report_options == "Relat√≥rio de IRRF":
                            # Gerar relat√≥rio de IRRF
                            irrf_results = processor.generate_irrf_report(consolidated_df, output_dir, display_result=True)
                            
                            # Criar link de download para o relat√≥rio de IRRF
                            if "pdf_file" in irrf_results and os.path.exists(irrf_results["pdf_file"]):
                                with open(irrf_results["pdf_file"], "rb") as f:
                                    pdf_data = f.read()
                                    b64 = base64.b64encode(pdf_data).decode()
                                    href = f'<a href="data:application/pdf;base64,{b64}" download="relatorio_irrf.pdf" class="download-button">Baixar Relat√≥rio de IRRF (PDF)</a>'
                                    st.markdown(href, unsafe_allow_html=True)
                            
                            # Exibir resumo do relat√≥rio de IRRF
                            st.write("## Resumo do Relat√≥rio de IRRF")
                            
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                st.metric("Total IRRF", processor.format_currency(irrf_results['total_irrf']))
                            with col2:
                                st.metric("Registros com IRRF", irrf_results['total_registros'])
                            with col3:
                                st.metric("IRRF A Pagar", processor.format_currency(irrf_results['irrf_a_pagar']))
                                st.metric("IRRF A Receber", processor.format_currency(irrf_results['irrf_a_receber']))
                        
                        else:
                            # Gerar relat√≥rios tradicionais
                            report_results = processor.generate_accounting_reports(consolidated_df, output_dir, display_result=False, debug=debug_mode)
                            
                            # Criar link de download para o ZIP com todos os relat√≥rios
                            if "zip_file" in report_results and os.path.exists(report_results["zip_file"]):
                                with open(report_results["zip_file"], "rb") as f:
                                    zip_data = f.read()
                                    b64 = base64.b64encode(zip_data).decode()
                                    href = f'<a href="data:application/zip;base64,{b64}" download="relatorios_contabeis.zip" class="download-button">Baixar todos os relat√≥rios (ZIP)</a>'
                                    st.markdown(href, unsafe_allow_html=True)
                            
                            # Exibir resultados dos relat√≥rios
                            st.write("## Resumo dos Relat√≥rios Gerados")
                            
                            # Calcular total geral
                            total_overall = sum(result["sum"] for _, result in report_results["reports"].items() if result["file"] is not None)
                            st.metric("Total Geral", f"R$ {total_overall:.2f}")
                            
                            # Exibir detalhes de cada relat√≥rio
                            for report_name, result in report_results["reports"].items():
                                if result["file"] is not None and result["count"] > 0:
                                    st.markdown(f"<div class='report-box'>", unsafe_allow_html=True)
                                    st.markdown(f"<div class='report-header'>{report_name.replace('_', ' ').title()}</div>", unsafe_allow_html=True)
                                    
                                    col1, col2 = st.columns(2)
                                    with col1:
                                        st.markdown(f"<div class='metric'><div>Registros</div><div class='metric-value'>{result['count']}</div></div>", unsafe_allow_html=True)
                                    with col2:
                                        st.markdown(f"<div class='metric'><div>Valor Total</div><div class='metric-value'>R$ {result['sum']:.2f}</div></div>", unsafe_allow_html=True)
                                    
                                    # Link para download do relat√≥rio espec√≠fico
                                    if os.path.exists(result["file"]):
                                        with open(result["file"], "rb") as f:
                                            pdf_data = f.read()
                                            b64 = base64.b64encode(pdf_data).decode()
                                            href = f'<a href="data:application/pdf;base64,{b64}" download="{os.path.basename(result["file"])}" target="_blank">Visualizar PDF</a>'
                                            st.markdown(href, unsafe_allow_html=True)
                                    
                                    st.markdown("</div>", unsafe_allow_html=True)
                        
                        # Concluir barra de progresso
                        progress_bar.progress(1.0)
                        status_text.text("Processamento conclu√≠do!")
                        st.success("‚úÖ Relat√≥rios cont√°beis gerados com sucesso!")
                    
                    except Exception as e:
                        st.error(f"Erro ao gerar relat√≥rios cont√°beis: {str(e)}")
    
    # Adiciona informa√ß√µes de rodap√©
    st.markdown("---")
    with st.expander("Informa√ß√µes sobre o processamento"):
        st.markdown("""
        # üìã Documenta√ß√£o Completa do Sistema
        
        ## üéØ Vis√£o Geral
        Sistema desenvolvido em Python com Streamlit para processar arquivos CSV da C√¢mara de Compensa√ß√£o do Sistema Uniodonto, gerando lan√ßamentos cont√°beis e relat√≥rios financeiros.
        
        ## ‚öôÔ∏è Regras de Processamento
        
        ### Estrutura do Arquivo CSV
        O arquivo CSV deve conter as seguintes colunas obrigat√≥rias:
        
        | Coluna | Descri√ß√£o | Tipo |
        |--------|-----------|------|
        | Tipo | Tipo de transa√ß√£o (A pagar/A receber) | Texto |
        | CodigoSingular | C√≥digo √∫nico da entidade | N√∫mero |
        | NomeSingular | Nome da entidade | Texto |
        | TipoSingular | Classifica√ß√£o (Operadora/Prestadora) | Texto |
        | CodigoTipoRecebimento | C√≥digo do tipo de recebimento | N√∫mero |
        | Descricao | Descri√ß√£o da transa√ß√£o | Texto |
        | ValorBruto | Valor bruto | Moeda |
        | TaxaAdministrativa | Taxa administrativa | Moeda |
        | Subtotal | Valor subtotal | Moeda |
        | IRRF | Imposto de Renda Retido na Fonte | Moeda |
        | OutrosTributos | Outros tributos | Moeda |
        | ValorLiquido | Valor l√≠quido | Moeda |
        
        ### Regras de Lan√ßamentos Cont√°beis
        
        #### Regras de D√©bito
        
        ##### A pagar - Operadora
        | CodigoTipoRecebimento | Conta |
        |----------------------|--------|
        | 1 | 31731 |
        | 2 | 40507 |
        | 3 | 52631 (UNIODONTO DO BRASIL) / 52632 (outros) |
        | 4 | 52532 |
        | 5 | 51818 |
        | 6 | 51202 |
        
        ##### A pagar - Prestadora
        | CodigoTipoRecebimento | Conta |
        |----------------------|--------|
        | 1,2 | 40140 |
        | 3 | 52631 (UNIODONTO DO BRASIL) / 52632 (outros) |
        | 4 | 52532 |
        | 5 | 51818 |
        | 6 | 51202 |
        
        ##### A receber - Operadora
        | CodigoTipoRecebimento | Conta |
        |----------------------|--------|
        | 1 | 19958 |
        | 2 | 85433 |
        | 3,4,5 | 84679 |
        | 6 | 19253 |
        
        ##### A receber - Prestadora
        | CodigoTipoRecebimento | Conta |
        |----------------------|--------|
        | 1,2 | 19253 |
        | 3,4,5 | 84679 |
        | 6 | 19253 |
        
        #### Regras de Cr√©dito
        
        ##### A pagar - Operadora
        | CodigoTipoRecebimento | Conta |
        |----------------------|--------|
        | 1 | 90918 |
        | 2 | 90919 |
        | 3 | 21898 (UNIODONTO DO BRASIL) / 22036 (outros) |
        | 4 | 21898 (UNIODONTO DO BRASIL) / 22036 (outros) |
        | 5 | 51818 |
        | 6 | 90919 |
        
        ##### A pagar - Prestadora
        | CodigoTipoRecebimento | Conta |
        |----------------------|--------|
        | 1,2 | 92003 |
        | 3 | 21898 (UNIODONTO DO BRASIL) / 22036 (outros) |
        | 4 | 21898 (UNIODONTO DO BRASIL) / 22036 (outros) |
        | 5 | 51818 |
        | 6 | 90919 |
        
        ##### A receber - Operadora/Prestadora
        | CodigoTipoRecebimento | Conta |
        |----------------------|--------|
        | 1 | 30203 |
        | 2 | 40413 |
        | 3 | 30069 |
        | 4 | 30071 |
        | 5 | 31426 |
        | 6 | 30127 |
        
        #### Regras de Hist√≥rico
        
        ##### A pagar
        | CodigoTipoRecebimento | Hist√≥rico |
        |----------------------|-----------|
        | 1,2,6 | 2005 |
        | 3 | 361 (UNIODONTO DO BRASIL) / 368 (outros) |
        | 4 | 365 |
        | 5 | 179 |
        
        ##### A receber
        | CodigoTipoRecebimento | Hist√≥rico |
        |----------------------|-----------|
        | 1,2,6 | 1021 |
        | 3 | 361 (UNIODONTO DO BRASIL) / 368 (outros) |
        | 4 | 365 |
        | 5 | 179 |
        
        ### Regras Especiais
        
        #### LGPD e Atu√°rio
        Quando CodigoTipoRecebimento = 5 e descri√ß√£o cont√©m:
        - **"LGPD"**:
          - D√©bito: 52129
          - Cr√©dito: 22036
          - Hist√≥rico: 2005
        - **"ATUARIO"/"ATU√ÅRIO"**:
          - D√©bito: 52451
          - Cr√©dito: 22036
          - Hist√≥rico: 2005
        
        ## üöÄ Funcionalidades Principais
        
        ### 1. Processamento de Arquivos
        - Leitura de arquivos CSV
        - Valida√ß√£o de dados
        - Processamento em lote
        - Detec√ß√£o autom√°tica de formato
        
        ### 2. Lan√ßamentos Cont√°beis
        - C√°lculo autom√°tico de d√©bito
        - C√°lculo autom√°tico de cr√©dito
        - Gera√ß√£o de hist√≥rico
        - Processamento de IRRF
        
        ### 3. Relat√≥rios
        - Exporta√ß√£o em CSV
        - Exporta√ß√£o em PDF
        - Visualiza√ß√£o na interface web
        - Download individual ou em lote
        
        ### 4. Interface Web
        - Upload de m√∫ltiplos arquivos
        - Visualiza√ß√£o pr√©via
        - Configura√ß√£o de data personalizada
        - Op√ß√µes avan√ßadas de processamento
        
        ## üíª C√≥digos das Contas Cont√°beis
        
        ### Principais Contas de D√©bito
        - **85433**: Contrapresta√ß√£o assumida em P√≥s-pagamento
        - **40507**: Despesas com Eventos/ Sinistros
        - **19958**: Contrapresta√ß√£o Corresponsabilidade Assumida Pr√©-pagamento
        - **52631**: Taxa para Manuten√ß√£o da Central
        - **52532**: Propaganda e Marketing - Matriz
        - **84679**: Outras Contas a Receber
        
        ### Principais Contas de Cr√©dito
        - **90919**: Interc√¢mbio a Pagar de Corresponsabilidade Cedida
        - **21898**: Contrap. Corresp. Assumida P√≥s
        - **22036**: Federa√ß√£o Paulista
        - **30203**: Corresponsabilidade Assumida Pr√©
        - **40413**: (-) Recup.Reemb. Contratante Assumida P√≥s-pagamento
        
        ### C√≥digos de Hist√≥rico
        - **1021**: VL. N/NFF. INTERC. RECEB.ODONT
        - **2005**: VL. S/NFF. INTERC. A PAGAR
        - **361**: VL. TAXA MANUT. DA CENTRAL S/N
        - **365**: VL. FUNDO DE MARKTING S/NFF
        - **179**: VL. MULTAS/JUROS
        
        ## ‚ö†Ô∏è Observa√ß√µes Importantes
        
        ### Formato dos Arquivos
        1. Arquivos CSV devem seguir o formato especificado
        2. Valores monet√°rios no formato brasileiro (v√≠rgula como separador decimal)
        3. Datas no formato DD/MM/YYYY
        4. Separador de colunas: ponto e v√≠rgula (;)
        
        ### Processamento
        1. Sistema processa m√∫ltiplos arquivos simultaneamente
        2. Relat√≥rios s√£o gerados automaticamente
        3. Valida√ß√µes s√£o realizadas durante o processamento
        4. Suporte a formatos simplificados com convers√£o autom√°tica
        
        ### Seguran√ßa
        1. N√£o armazena dados sens√≠veis
        2. Processamento local dos arquivos
        3. Exporta√ß√£o segura dos relat√≥rios
        4. Dados tempor√°rios s√£o limpos automaticamente
        
        ---
        
        **Para mais informa√ß√µes ou suporte, consulte o c√≥digo fonte ou entre em contato com a equipe de desenvolvimento.**
        """)
        
        st.write("""
        ### Relat√≥rios Cont√°beis Dispon√≠veis
        
        1. **Taxas de Manuten√ß√£o (3)** - Para todas (operadoras e prestadoras)
        2. **Taxas de Marketing (4)** - Para todas (operadoras e prestadoras)
        3. **Multas e Juros (5)** - Para todas (operadoras e prestadoras)
        4. **Outras (6)** - Para todas (operadoras e prestadoras)
        5. **Pr√©-pagamento (1)** - Somente operadoras
        6. **Custo Operacional (2)** - Somente operadoras
        7. **Pr√©-pagamento (1)** - Somente prestadoras
        8. **Custo Operacional (2)** - Somente prestadoras
        
        Cada relat√≥rio inclui o total de registros, o valor total e uma listagem detalhada com as descri√ß√µes das contas cont√°beis.
        """)
    
    with tab3:
        st.header("Edi√ß√£o de Dados")
        
        # Se√ß√£o de sele√ß√£o e upload de arquivos
        st.subheader("üìÅ Sele√ß√£o de Arquivos")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Upload de m√∫ltiplos arquivos CSV
            uploaded_edit_files = st.file_uploader(
                "Fa√ßa upload de novos arquivos CSV para edi√ß√£o", 
                type=["csv"], 
                accept_multiple_files=True,
                key="upload_edit_files"
            )
            
            # Processar arquivos carregados
            if uploaded_edit_files:
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                for i, uploaded_file in enumerate(uploaded_edit_files):
                    status_text.text(f"Processando {uploaded_file.name}...")
                    progress_bar.progress((i) / len(uploaded_edit_files))
                    
                    try:
                        processed_df, original_df = processor.process_csv_file(uploaded_file)
                        
                        if processed_df is not None:
                            # Inicializar session_state se necess√°rio
                            if 'processed_dfs' not in st.session_state:
                                st.session_state.processed_dfs = {}
                            if 'original_dfs' not in st.session_state:
                                st.session_state.original_dfs = {}
                            
                            # Adicionar √† sess√£o
                            st.session_state.processed_dfs[uploaded_file.name] = processed_df
                            st.session_state.original_dfs[uploaded_file.name] = original_df
                            
                        progress_bar.progress((i+1) / len(uploaded_edit_files))
                    
                    except Exception as e:
                        st.error(f"Erro ao processar {uploaded_file.name}: {str(e)}")
                
                progress_bar.progress(1.0)
                status_text.text("Upload conclu√≠do!")
                st.success(f"‚úÖ {len(uploaded_edit_files)} arquivo(s) carregado(s) com sucesso!")
        
        with col2:
            st.write("**Arquivos dispon√≠veis:**")
            if 'processed_dfs' in st.session_state and st.session_state.processed_dfs:
                st.write(f"üìÑ {len(st.session_state.processed_dfs)} arquivo(s)")
                for filename in st.session_state.processed_dfs.keys():
                    st.write(f"‚Ä¢ {filename}")
            else:
                st.write("üìÑ Nenhum arquivo carregado")
        
        if 'processed_dfs' not in st.session_state or not st.session_state.processed_dfs:
            st.info("üì§ Fa√ßa upload de arquivos CSV ou processe arquivos na aba 'Processamento de Arquivos' para editar dados.")
        else:
            st.markdown("---")
            
            # Sele√ß√£o do arquivo para edi√ß√£o
            st.subheader("üéØ Arquivo para Edi√ß√£o")
            processed_files = list(st.session_state.processed_dfs.keys())
            selected_file = st.selectbox("Selecione o arquivo que deseja editar:", processed_files)
            
            if selected_file:
                # Obter DataFrame ORIGINAL do arquivo selecionado
                if 'original_dfs' in st.session_state and selected_file in st.session_state.original_dfs:
                    df_edit = st.session_state.original_dfs[selected_file].copy()
                else:
                    # Fallback para dados processados se n√£o houver originais
                    df_edit = st.session_state.processed_dfs[selected_file].copy()
                
                # Verificar se h√° arquivo editado salvo na sess√£o
                edited_key = f'edited_{selected_file}'
                if edited_key in st.session_state:
                    df_edit = st.session_state[edited_key].copy()
                    st.info("üìù Exibindo arquivo com altera√ß√µes salvas")
                
                # Adicionar ID √∫nico para cada linha se n√£o existir
                if 'row_id' not in df_edit.columns:
                    df_edit['row_id'] = range(len(df_edit))
                
                # Estat√≠sticas do arquivo
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("üìÑ Arquivo Selecionado", selected_file)
                with col2:
                    st.metric("üìä Total de Registros", len(df_edit))
                with col3:
                    # Verificar se h√° altera√ß√µes pendentes
                    if edited_key in st.session_state:
                        st.metric("‚úèÔ∏è Status", "Editado", delta="Altera√ß√µes salvas")
                    else:
                        st.metric("‚úèÔ∏è Status", "Original")
                
                st.markdown("---")
                
                # Se√ß√£o de filtro simplificado
                st.subheader("üîç Filtro")
                filtro_texto = st.text_input(
                    "Digite qualquer texto para buscar em todas as colunas:",
                    help="Busca em: Nome Singular, Descri√ß√£o, Tipo, C√≥digo, etc."
                )
                
                # Aplicar filtro por texto em todas as colunas
                df_filtrado = df_edit.copy()
                
                if filtro_texto:
                    mask = pd.Series([False] * len(df_filtrado))
                    
                    # Buscar em todas as colunas de texto
                    for col in df_filtrado.columns:
                        if col != 'row_id':  # Excluir apenas a coluna de ID
                            try:
                                mask |= df_filtrado[col].astype(str).str.contains(
                                    filtro_texto, case=False, na=False, regex=False
                                )
                            except:
                                continue  # Ignorar colunas que n√£o podem ser convertidas para string
                    
                    df_filtrado = df_filtrado[mask]
                
                # Informa√ß√µes sobre o filtro
                if filtro_texto:
                    st.write(f"**üîç Filtrados:** {len(df_filtrado)} de {len(df_edit)} registros")
                else:
                    st.write(f"**üìã Exibindo:** {len(df_filtrado)} registros")
                
                if len(df_filtrado) > 0:
                    # Se√ß√£o de sele√ß√£o
                    st.subheader("‚úÖ Sele√ß√£o de Registros")
                    
                    col1, col2 = st.columns([1, 1])
                    
                    with col1:
                        selecionar_todos = st.checkbox("Selecionar todos os registros filtrados")
                    
                    with col2:
                        if st.button("üóëÔ∏è Limpar sele√ß√£o"):
                            st.session_state.selected_rows = []
                    
                    # Inicializar sele√ß√£o se n√£o existir
                    if 'selected_rows' not in st.session_state:
                        st.session_state.selected_rows = []
                    
                    # Se "selecionar todos" foi marcado, adicionar todos os IDs filtrados
                    if selecionar_todos:
                        st.session_state.selected_rows = df_filtrado['row_id'].tolist()
                    
                    # Tabela para edi√ß√£o
                    st.subheader("üìã Dados para Edi√ß√£o")
                    
                    # Preparar dados para exibi√ß√£o - APENAS colunas originais
                    colunas_exibicao = ['row_id']
                    colunas_originais = ['Tipo', 'CodigoSingular', 'NomeSingular', 'TipoSingular', 'RegistroANS',
                                       'CodigoTipoRecebimento', 'DescricaoTipoRecebimento', 'NumeroDocumento', 
                                       'Descricao', 'ValorBruto', 'TaxaAdministrativa', 'Subtotal', 
                                       'IRRF', 'OutrosTributos', 'ValorLiquido']
                    
                    for col in colunas_originais:
                        if col in df_filtrado.columns:
                            colunas_exibicao.append(col)
                    
                    df_display = df_filtrado[colunas_exibicao].copy()
                    
                    # Adicionar coluna de sele√ß√£o
                    df_display['Selecionar'] = df_display['row_id'].isin(st.session_state.selected_rows)
                    
                    # Reordenar colunas
                    cols = ['Selecionar'] + [col for col in df_display.columns if col != 'Selecionar']
                    df_display = df_display[cols]
                    
                    # Exibir tabela edit√°vel
                    edited_df = st.data_editor(
                        df_display,
                        use_container_width=True,
                        height=400,
                        column_config={
                            "Selecionar": st.column_config.CheckboxColumn(
                                "Selecionar",
                                help="Selecione os registros para edi√ß√£o",
                                default=False,
                            ),
                            "row_id": st.column_config.NumberColumn(
                                "ID",
                                help="ID √∫nico do registro",
                                disabled=True,
                            ),
                            "CodigoTipoRecebimento": st.column_config.NumberColumn(
                                "C√≥digo",
                                help="C√≥digo do tipo de recebimento",
                                width="small",
                            ),
                            "DescricaoTipoRecebimento": st.column_config.TextColumn(
                                "Descri√ß√£o",
                                help="Descri√ß√£o do tipo de recebimento",
                                width="medium",
                            ),
                            "ValorBruto": st.column_config.NumberColumn(
                                "Valor Bruto",
                                help="Valor bruto da transa√ß√£o",
                                format="R$ %.2f",
                            ),
                        },
                        disabled=[col for col in colunas_exibicao if col not in ["Selecionar"]],
                        key="data_editor_edit"
                    )
                    
                    # Atualizar sele√ß√£o baseada na tabela editada
                    selected_rows = edited_df[edited_df['Selecionar']]['row_id'].tolist()
                    st.session_state.selected_rows = selected_rows
                    
                    # Mostrar registros selecionados
                    if selected_rows:
                        st.success(f"‚úÖ {len(selected_rows)} registro(s) selecionado(s)")
                        
                        # Se√ß√£o de edi√ß√£o
                        st.subheader("‚úèÔ∏è Edi√ß√£o")
                        
                        # Sele√ß√£o do novo CodigoTipoRecebimento
                        opcoes_codigo = {
                            1: "1 - Repasse em Pr√©-pagamento",
                            2: "2 - Repasse em Custo Operacional", 
                            3: "3 - Taxa de Manuten√ß√£o",
                            4: "4 - Fundo de Marketing",
                            5: "5 - Juros",
                            6: "6 - Outros"
                        }
                            
                        col1, col2 = st.columns([2, 1])
                        
                        with col1:
                            novo_codigo = st.selectbox(
                                "Novo C√≥digo e Descri√ß√£o:",
                                options=list(opcoes_codigo.keys()),
                                format_func=lambda x: opcoes_codigo[x],
                                key="novo_codigo_edit"
                            )
                            
                            # Mapeamento das descri√ß√µes
                            mapeamento_descricao = {
                                1: "Repasse em Pr√©-pagamento",
                                2: "Repasse em Custo Operacional",
                                3: "Taxa de Manuten√ß√£o",
                                4: "Fundo de Marketing", 
                                5: "Juros",
                                6: "Outros"
                            }
                            
                            st.info(f"üìù **C√≥digo:** {novo_codigo} | **Descri√ß√£o:** {mapeamento_descricao[novo_codigo]}")
                        
                        with col2:
                            st.write("")  # Espa√ßamento
                            st.write("")  # Espa√ßamento
                            
                            # Bot√£o para aplicar altera√ß√£o
                            if st.button("üíæ Salvar Altera√ß√µes", type="primary", use_container_width=True):
                                # Aplicar altera√ß√µes
                                for row_id in selected_rows:
                                    # Encontrar o √≠ndice no DataFrame
                                    idx = df_edit[df_edit['row_id'] == row_id].index[0]
                                    
                                    # Atualizar CodigoTipoRecebimento e DescricaoTipoRecebimento
                                    df_edit.loc[idx, 'CodigoTipoRecebimento'] = novo_codigo
                                    df_edit.loc[idx, 'DescricaoTipoRecebimento'] = mapeamento_descricao[novo_codigo]
                                
                                # Salvar arquivo editado na sess√£o
                                st.session_state[edited_key] = df_edit
                                
                                # Gerar arquivo reprocessado automaticamente
                                colunas_originais = ['Tipo', 'CodigoSingular', 'NomeSingular', 'TipoSingular', 'RegistroANS',
                                                   'CodigoTipoRecebimento', 'DescricaoTipoRecebimento', 'NumeroDocumento', 
                                                   'Descricao', 'ValorBruto', 'TaxaAdministrativa', 'Subtotal', 
                                                   'IRRF', 'OutrosTributos', 'ValorLiquido']
                                
                                colunas_disponveis = [col for col in colunas_originais if col in df_edit.columns]
                                df_reprocessar = df_edit[colunas_disponveis].copy()
                                
                                # Remover row_id para reprocessamento
                                if 'row_id' in df_reprocessar.columns:
                                    df_reprocessar = df_reprocessar.drop('row_id', axis=1)
                                
                                # Reprocessar com l√≥gica cont√°bil
                                df_reprocessado = processor.process_dataframe(df_reprocessar)
                                
                                # Salvar arquivo reprocessado na sess√£o
                                reprocessed_key = f'reprocessed_{selected_file}'
                                st.session_state[reprocessed_key] = df_reprocessado
                                
                                # Atualizar dados processados para usar nos relat√≥rios
                                st.session_state.processed_dfs[selected_file] = df_reprocessado
                                
                                st.success(f"‚úÖ {len(selected_rows)} registro(s) alterado(s) e arquivo reprocessado!")
                                st.info("üîÑ Arquivo reprocessado automaticamente e dispon√≠vel para relat√≥rios")
                                
                                # Limpar sele√ß√£o
                                st.session_state.selected_rows = []
                                
                                # Recarregar para mostrar mudan√ßas
                                st.rerun()
                        
                    # Se√ß√£o de download - sempre vis√≠vel se h√° arquivo editado
                    if edited_key in st.session_state:
                        st.markdown("---")
                        st.subheader("üì• Download")
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            # Download do arquivo editado (formato original)
                            if st.button("üìÑ Baixar Arquivo Editado (Original)", type="secondary"):
                                # Filtrar apenas colunas originais
                                colunas_originais = ['Tipo', 'CodigoSingular', 'NomeSingular', 'TipoSingular', 'RegistroANS',
                                                   'CodigoTipoRecebimento', 'DescricaoTipoRecebimento', 'NumeroDocumento', 
                                                   'Descricao', 'ValorBruto', 'TaxaAdministrativa', 'Subtotal', 
                                                   'IRRF', 'OutrosTributos', 'ValorLiquido']
                                
                                df_download = st.session_state[edited_key].copy()
                                colunas_disponveis = [col for col in colunas_originais if col in df_download.columns]
                                df_download = df_download[colunas_disponveis]
                                
                                # Remover row_id se existir
                                if 'row_id' in df_download.columns:
                                    df_download = df_download.drop('row_id', axis=1)
                                
                                output_filename = f"editado_{selected_file}"
                                download_link = processor.create_download_link(df_download, output_filename)
                                st.markdown(download_link, unsafe_allow_html=True)
                                st.success("‚úÖ Arquivo editado pronto para download!")
                        
                        with col2:
                            # Download do arquivo reprocessado (com colunas cont√°beis)
                            if st.button("üìä Baixar Arquivo Reprocessado (Cont√°bil)", type="primary"):
                                # REPROCESSAR ARQUIVO COM NOVAS REGRAS DE D√âBITO/CR√âDITO
                                st.info("üîÑ Reprocessando arquivo com as novas regras cont√°beis...")
                                
                                # Pegar o arquivo editado atual
                                df_para_reprocessar = st.session_state[edited_key].copy()
                                
                                # Filtrar apenas colunas originais e remover row_id
                                colunas_originais = ['Tipo', 'CodigoSingular', 'NomeSingular', 'TipoSingular', 'RegistroANS',
                                                   'CodigoTipoRecebimento', 'DescricaoTipoRecebimento', 'NumeroDocumento', 
                                                   'Descricao', 'ValorBruto', 'TaxaAdministrativa', 'Subtotal', 
                                                   'IRRF', 'OutrosTributos', 'ValorLiquido']
                                
                                colunas_disponveis = [col for col in colunas_originais if col in df_para_reprocessar.columns]
                                df_clean = df_para_reprocessar[colunas_disponveis].copy()
                            
                                # Remover row_id se existir
                                if 'row_id' in df_clean.columns:
                                    df_clean = df_clean.drop('row_id', axis=1)
                                
                                # REAPLICAR REGRAS CONT√ÅBEIS com os novos c√≥digos usando process_dataframe
                                st.info("üìã Recalculando contas de D√©bito, Cr√©dito e Hist√≥rico...")
                                
                                # Usar process_dataframe que j√° faz tudo: aplica regras cont√°beis E adiciona IRRF
                                df_export = processor.process_dataframe(df_clean)
                                
                                # Salvar arquivo reprocessado atualizado na sess√£o
                                reprocessed_key = f'reprocessed_{selected_file}'
                                st.session_state[reprocessed_key] = df_export
                                
                                # Atualizar tamb√©m nos dados processados para relat√≥rios
                                st.session_state.processed_dfs[selected_file] = df_export
                                
                                # Gerar download
                                output_filename = f"contabil_{selected_file}"
                                download_link = processor.create_download_link(df_export, output_filename)
                                st.markdown(download_link, unsafe_allow_html=True)
                                st.success("‚úÖ Arquivo reprocessado com novas regras cont√°beis pronto para download!")
                                st.info("üéØ **Contas de D√©bito, Cr√©dito e Hist√≥rico recalculadas** baseadas nos novos c√≥digos selecionados")
                        
                        # Informa√ß√µes sobre os arquivos
                        st.info("""
                        üìã **Informa√ß√µes sobre os Downloads:**
                        - **Arquivo Editado**: Mant√©m formato original do CSV, ideal para reimportar no sistema
                        - **Arquivo Reprocessado**: Inclui colunas cont√°beis (D√©bito, Cr√©dito, Hist√≥rico), pronto para contabilidade
                        - **Relat√≥rios**: Agora usar√£o automaticamente o arquivo reprocessado com suas altera√ß√µes
                        """)
                
                else:
                    st.warning("üîç Nenhum registro encontrado com o filtro aplicado.")
                    st.write("üí° **Dica:** Tente usar termos diferentes ou remova o filtro para ver todos os registros.")

if __name__ == "__main__":
    main()
